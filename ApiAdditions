== API Introduction == 

Spacewalk provides an Application Programming Interface (API) to enable creation of tools and programs to automate common tasks typically performed through the Spacewalk Web User Interface.  The tools/programs may be implemented in any programming language that provides an XML-RPC client interface; however, Python and Perl are the two most commonly used languages.

== API Development ==

We are in the process of defining and developing additional APIs.

To view the APIs currently available for Spacewalk, simply navigate to https://myspacewalkserver.com/rhn/apidoc/index.jsp, where ''myspacewalk.com'' is your installed Spacewalk server.

If you have an idea or need for a new API, please add it to the Planned API table below.  If you aren't sure exactly what an API call should be named, simply add it to the scratchpad below and a developer will add it to the Planned APIs table.

=== Scratchpad ===

 * Be able to delete system notes (system namespace) -- I could probably write this, but it would take Justin like 5 minutes. --stahnma
 * idea2
 * idea3


=== Planned APIs ===


||  '''Task''' || '''Target Release''' ||  '''Estimate (hours)''' || '''Developer''' || '''Status''' || '''Notes''' ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: activationkey''' ||  ||  ||  ||  ||  ||
||  activationkey.enableConfigDeployment(string sessionKey, string activationKey) || 0.3 || 3  || coec || done  ||  ||
||  activationkey.disableConfigDeployment(string sessionKey, string activationKey) || 0.3 || 2 || coec || done  ||  ||
||  activationkey.checkConfigDeployment(string sessionKey, string activationKey) || 0.3 || 2 || coec || done  ||  ||
||  '''Namespace: channel.access''' ||  ||  ||  ||  ||  ||
|| channel.access.enableUserRestrictions(string sessionKey, string channelLabel) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Enable user/subscriber restrictions for the channel.  When user restrictions are enabled, only selected users may subscribe to the channel.[[BR]]* Returns 1 on success, exception thrown otherwise.||
|| channel.access.disableUserRestrictions(string sessionKey, string channelLabel) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Disable user/subscriber restrictions for the channel.  When user restrictions are disabled, all users within the organization may subscribe to the channel.[[BR]]* Returns 1 on success, exception thrown otherwise.||
|| channel.access.enableOrgSharing(string sessionKey, string channelLabel) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Enable organization sharing for the channel.  This makes the channel public; therefore, it is accessible to the trusted organizations.[[BR]]* Returns 1 on success, exception thrown otherwise.||
|| channel.access.disableOrgSharing(string sessionKey, string channelLabel) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Disable organization sharing for the channel.  This makes the channel private; therefore, it will not be accessible by trusted organizations.[[BR]]* Returns 1 on success, exception thrown otherwise.||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: channel.organizations''' ||  ||  ||  ||  ||  ||
|| channel.organizations.list(string sessionKey, int orgId, string channelLabel) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* List the orgs that are trusted by the current organization (orgId) and info on which are trusted to access this channel (channelLabel).[[BR]]* Returns array[ struct[ int trustOrgId, boolean trustEnabled ] ].[[BR]]* The user executing this method must be an Org Admin.||
|| channel.organizations.enableTrust(string sessionKey, int orgId, string channelLabel, int trustOrgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Enable trust of an org (trustOrgId) to grant access to view and consume the content of the channel specified (channelLabel).[[BR]]* The org being trusted must be one that from the organization's trust list (e.g. listTrusts).[[BR]]* Returns 1 on success, exception thrown otherwise.[[BR]]* The user executing this method must be an Org Admin.||






























|| channel.organizations.disableTrust(string sessionKey, int orgId, string channelLabel, int trustOrgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Disable trust of an org (trustOrgId) revoking access to view and consume the content of the channel specified (channelLabel).[[BR]]* Returns 1 on success, exception thrown otherwise.[[BR]]* The user executing this method must be an Org Admin.||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: channel.subscribers''' ||  ||  ||  ||  ||  ||
||  (Multi Org Phase2 support) '''TODO: need info on what will be configured on this page w/in the web-ui'''   ||  ||  ||  ||  ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: channel.software''' ||  ||  ||  ||  ||  ||
|| channel.software.listErrataByType(string sessionKey, string channelLabel, string advisoryType) || 0.3 || 4 || bbuckingham || done ||  ||
|| channel.software.getContactDetails(string sessionKey, string channelLabel) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Retrieve the contact/support information for a given channel.[[BR]]* Returns struct[ string name, string email, string phoneNumber, string supportPolicy ]||
|| channel.software.setContactDetails(string sessionKey, string channelLabel, string name, string email, string phoneNumber, string supportPolicy) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support[[BR]]* Set the contact/support information for a given channel.[[BR]]* Returns 1 on success, exception thrown otherwise.||
||  byte[] package.getPackage(string sessionKey, int packageId) || 0.3 || 8 || jsherrill || Done ||  ||
||  string package.getPackageUrl(string sessionKey, int packageId) || 0.2 || 5 || jsherrill || Done || Obtain the package download URL. ||
||  channel.software.mergeErrata(string sessionKey, string fromChannel, string toChannel) || 0.3 || 3 || bbuckingham || done ||  ||
||  channel.software.mergeErrata(string sessionKey, string fromChannel, string toChannel, string startDate, string endDate) || 0.3 || 6 || bbuckingham || done ||  ||
||  channel.software.uploadPackage(package) || 0.5 || 12 ||  ||  || This API provides the same basic function as rhnpush; therefore, it may be removed in a future update. ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: configchannel''' ||  ||  ||  ||  ||  ||
||  configchannel.channelExists(sessionKey, string channelLabel) || 0.3 || || coec || done || returns 1 if the channel exists or 0 if it does not ||
||  configchannel.scheduleFileComparisons(string sessionKey, string channelLabel, string path, array[int serverId]) || 0.3 || 4 || bbuckingham || done || * Schedule a file comparison on the list of systems provided.[[BR]]* Returns the id of the scheduled action (int actionId). ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: errata''' ||  ||  ||  ||  ||  ||
||  errata.findByCve(string sessionKey, string cveName) || 0.3 || 3 || bbuckingham || done || Retrieve errata based on CVE (e.g. CVE-2008-1233)  ||
||  errata.setDetails([[BR]]string sessionKey, [[BR]]struct(errata details)[[[BR]]string synopsis, [[BR]]string advisoryName, [[BR]]string advisoryRelease, [[BR]]string advisoryType, [[BR]]string product, [[BR]]string topic, [[BR]]string description, [[BR]]string solution, [[BR]]   string references, [[BR]]string notes, [[BR]]array[struct(bug)[int id, string summary]], [[BR]]array[string keyword]) || 0.4 || tbd ||  ||  || * Set errata details.  All arguments are optional and will only be modified if included.[[BR]] * Returns 1 on success, exception thrown otherwise. ||
||  errata.addPackages(string sessionKey, string advisoryName, array[int packageId]) || 0.4 || tbd ||  ||  || * Adds a set of packages to an errata.  Invoking this API will not impact packages already associated with the errata.[[BR]] * Returns 1 on success, exception thrown otherwise.  ||



||  errata.removePackages(string sessionKey, string advisoryName, array[int packageId]) || 0.4 || tbd ||  ||  || * Remove a set of packages from an errata.[[BR]] * Returns 1 on success, exception thrown otherwise.  ||
||  ----   ||  ||  ||  ||  ||  ||



||  '''Namespace: kickstart.profile''' ||  ||  ||  ||  ||  ||
||  kickstart.deleteProfile(string sessionKey, string kslabel) || 0.3 || 2 || jsherrill || done ||  ||
||  kickstart.profile.compareActivationKeys(string sessionKey, string kslabel1, string kslabel2) || 0.3 || 5 || jdob  || done ||  ||
||  kickstart.profile.comparePackages(string sessionKey, string kslabel1, string kslabel2) || 0.3 || 5 || jdob  || done ||  ||
||  kickstart.profile.compareAdvancedOptions(string sessionKey, string kslabel1, string kslabel2) || 0.3 || 5 || jdob  || done ||  ||
||  kickstart.profile.getAdvancedOptions(string sessionKey, string kslabel) || 0.3 || 2 || skarmark || done ||  ||
||  kickstart.profile.setAdvancedOptions(string sessionKey, string kslabel, array[struct[string optionName, boolean enabled, string value]) || 0.3 || 4 || skarmark || done || Set advanced options on the profile.  The optionNames supported are based on those available in the UI and includes: autostep, interactive, install, upgrade, text, network, cdrom, harddrive, nfs, url, lang, langsupport keyboard, mouse, device, deviceprobe, zerombr, clearpart, bootloader, timezone, auth, rootpw, selinux, reboot, firewall, xconfig, skipx, key, ignoredisk, autopart, cmdline, firstboot, graphical, iscsi, iscsiname, logging, monitor, multipath, poweroff, halt, service, shutdown, user, vnc and zfcp. The following options do not have a value; therefore, if one is provided it will be ignored: interactive, install, upgrade, text, cdrom, reboot, skipx, autopart, cmdline, graphical, poweroff, halt and shutdown. ||
||  kickstart.profile.getCustomOptions(string sessionKey, string kslabel) || 0.3 || 2 || coec || done (pending junit) ||  ||
||  kickstart.profile.setCustomOptions(string sessionKey, string kslabel, string options) || 0.3 || 4 || coec || done (pending junit) || Set the "custom" advanced options on the profile.  The user may provide any options desired; therefore, it should be noted that providing an invalid option can cause kickstarts to fail.  Also, the option text is limited to 2048 characters. ||
||  kickstart.profile.listIpRanges(string sessionKey, int ksLabel) || 0.2 || 3 || jsherrill  || done || list ip ranges for a kickstart ||  
||  kickstart.profile.addIpRange(string sessionKey, int ksLabel) || 0.2 || 4 || jsherrill  || done || ksLabel is an int? || 
||  kickstart.profile.removeIpRange(string sessionKey, ksLabel, ip) || 0.2 || 3 || jsherrill ||done || ||   
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: kickstart.profile.system''' ||  ||  ||  ||  ||  ||
||  kickstart.profile.system.setNetworkConnection(string sessionKey, boolean dhcp, string interface) || 0.2 || 3 ||partha||done  || Set the network connection details.  If dhcp is true, dhcp will be utilized; otherwise, it will be static IP. ||
||  kickstart.profile.system.setSELinux(string sessionKey, string kslabel, string enforcingMode) || 0.2 || 2 || partha ||done || Set the SELinux preference where enforcingMode is enforcing, permissive or disabled. ||
||  kickstart.profile.system.enableConfigMgmt(string sessionKey, string kslabel) || 0.2 || 2 ||partha  ||done  ||  ||
||  kickstart.profile.system.disableConfigMgmt(string sessionKey, string kslabel) || 0.2 || 2 ||partha  ||done  ||  ||
||  kickstart.profile.system.enableRemoteCmds(string sessionKey, string kslabel) || 0.2 || 2 ||partha  ||done  ||  ||
||  kickstart.profile.system.disableRemoteCmds(string sessionKey, string kslabel) || 0.2 || 2 ||partha  ||done ||  ||
||  kickstart.profile.system.getLocale(string sessionKey, string kslabel) || 0.3 || 3 || bbuckingham || done || * Retrieve the locale information for the kickstart profile.[[BR]] * Returns struct[string locale, int useUtc] ||
||  kickstart.profile.system.setLocale(string sessionKey, string kslabel, string locale, boolean useUtc) || 0.3 || 3 || bbuckingham || done ||  ||
||  kickstart.profile.system.listAssociatedFilePreservations(string sessionKey, string kslabel) || 0.4 || 3 ||  ||  ||  ||
||  kickstart.profile.system.associateFilePreservations(string sessionKey, fllabels) || 0.4 || 4 ||  ||  ||  ||
||  kickstart.profile.system.listAssociatedKeys(string sessionKey, string kslabel) || 0.3 || 3 || jdob || done || Retrieve the GPG and SSL keys associated with the kickstart profile. ||
||  kickstart.profile.system.associateKeys(string sessionKey, string kslabel, array[string description]) || 0.3 || 4 || jdob || done || Associate GPG and SSL keys with the kickstart profile. ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: kickstart.profile.software''' ||  ||  ||  ||  ||  ||

||  kickstart.profile.software.appendToSoftwareList(string sessionKey) || 0.3 || 2 || bbuckingham || done ||  ||
||  kickstart.profile.software.getSoftwareList(string sessionKey) || 0.3 || 2 || jortel || done ||  ||
||  kickstart.profile.software.setSoftwareList(string sessionKey) || 0.3 || 3 || jortel || done ||   ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: kickstart.profile.keys''' ||  ||  ||  ||  ||  ||
||  kickstart.profile.keys.addActivationKey(string sessionKey, string kslabel, string key) || 0.3 || 3 || bbuckingham || done ||  ||
||  kickstart.profile.keys.removeActivationKey(string sessionKey, string kslabel, string key) || 0.3 || 3 || bbuckingham || done ||  ||
||  kickstart.profile.keys.getActivationKeys(string sessionKey, string kslabel) || 0.3 || 3 || bbuckingham  || done ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: kickstart.profile.scripts''' ||  ||  ||  ||  ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: kickstart.baremetal''' ||  ||  ||  ||  ||  ||
||  kickstart.baremetal.listAllIpRanges(string sessionKey) || 0.2 || 3 || jsherrill  || done ||  List all ip ranges for all kickstarts ||
||  kickstart.baremetal.findKickstartForIp(string sessionKey) || 0.2 || 3 || jsherrill     || done ||  ||  
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: kickstart.keys''' ||  ||  ||  ||  ||  ||
||  kickstart.keys.listAllKeys(string sessionKey) ||0.3  || 2 || jdob || done || * List all GPG and SSL keys for all kickstarts.[[BR]]* Returns array[struct[string description, string type]] ||
||  kickstart.keys.create(string sessionKey, string description, string type, content) ||0.3  || 4 || jdob || done || * Create a GPG or SSL key. This key may then be associated with a kickstart profile (via kickstart.profile.system.associateKeys()). [[BR]]* Returns 1 on success, exception thrown otherwise. ||
||  kickstart.keys.delete(string sessionKey, string description) ||0.3  || 4 || jdob || done || * Remove a GPG or SSL key. [[BR]]* Returns 1 on success, exception thrown otherwise. ||
||  kickstart.keys.getDetails(string sessionKey, string description) ||0.3 || 4 || jdob || done || * Obtain details on a GPG or SSL key. [[BR]]* Returns struct[string description, string type, content] ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: kickstart.distributions''' ||  ||  ||  ||  ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: kickstart.filepreservation''' ||  ||  ||  ||  ||  ||
||  kickstart.filepreservation.listAllFilePreservations(string sessionKey) || 0.4 || 2 ||  ||  ||  ||
||  kickstart.filepreservation.createFilePreservation(string sessionKey, string kslabel, list) || 0.4 || 3 ||  ||  || Create a file preservation list for the kickstart profile. ||
||  kickstart.filepreservation.deleteFilePreservation(string sessionKey, string kslabel) || 0.4 || 3 ||  ||  ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: monitoring''' ||  ||  ||  ||  ||  ||
||  monitoring.listProbes(sid) || 0.5 || 3 ||  ||  ||  ||
||  monitoring.getLatestProbeResults(sid) || 0.5 || 3 ||  ||  ||  ||
||  monitoring.getAllResults(sid, probe_id) || 0.5 || 3 ||  ||  ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: org''' ||  ||  ||  ||  ||  ||
||  org.listOrgs(string sessionKey)   || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* List the orgs defined by the Spacewalk. [[BR]]* Update the existing API to include the number of "trusts".[[BR]]* The user executing the method must be a Spacewalk Admin.||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: org.trusts''' ||  ||  ||  ||  ||  ||
|| org.trusts.listTrusts(string sessionKey, int orgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Lists the orgs that the organization (orgId) may define as trusted and info on whether or not each org (trustOrgId) is in the oganization's trust ring (i.e. org enabled/checked).[[BR]]* Returns array[ struct[ int trustOrgId, boolean trustEnabled ] ].[[BR]]* The user executing this method must be a Spacewalk Admin.||
|| org.trusts.addTrust(string sessionKey, int orgId, int trustOrgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Add an org (trustOrgId) to an organization's (orgId) trust ring.[[BR]]* Only orgs from the organization's trust list (e.g. listTrusts) may be added.[[BR]] * Returns 1 on success, exception thrown otherwise.[[BR]]* The user executing this method must be a Spacewalk Admin.||
|| org.trusts.removeTrust(string sessionKey, int orgId, int trustOrgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Remove an org (trustOrgId) from an organization's (orgId) trust ring.[[BR]]* Returns 1 on success, exception thrown otherwise.[[BR]]* The user executing this method must be a Spacewalk Admin||
|| org.trusts.listSystemsAffected(string sessionKey, int orgId, int trustOrgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Retrieve the list of systems in the trusted org (trustOrgId) affected by the trust with an organization (orgId).[[BR]]* Returns ->  '''What info is the web-UI planning to return in this case?'''[[BR]]* Note: perhaps this could be combined w/another api.[[BR]]* The user executing this method must be a Spacewalk Admin. ||
|| org.trusts.listTrustRingDetails(string sessionKey, int orgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* List trust details for each of the orgs defined in an organization's trust ring.  (Note: the trust ring is set up by the Spacewalk admin.)[[BR]]* Returns array[ struct[ int trustedOrgId, int channels, boolean shareSoftware, boolean enableMigration ] ][[BR]]* The user executing this method must be an Org Admin.||
|| org.trusts.enableSoftwareSharing(string sessionKey, int orgId, int trustedOrgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Enable software sharing for an org (trustedOrgId) within an organization's (orgId) trust ring.[[BR]]* Returns 1 on success, exception thrown otherwise.[[BR]]* The user executing this method must be an Org Admin. ||
|| org.trusts.disableSoftwareSharing(string sessionKey, int orgId, int trustedOrgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Disable software sharing for an org (trustedOrgId) within an organization's (orgId) trust ring.[[BR]]* Returns 1 on success, exception thrown otherwise.[[BR]]* The user executing this method must be an Org Admin.||
|| org.trusts.enableSystemMigration(string sessionKey, int orgId, int trustedOrgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Enable system migrations for an org (trustedOrgId) within an organization's (orgId) trust ring.[[BR]]* Returns 1 on success, exception thrown otherwise.[[BR]]* The user executing this method must be an Org Admin. ||
|| org.trusts.disableSystemMigration(string sessionKey, int orgId, int trustedOrgId) || 0.4 || 4 ||  ||  ||(Multi Org Phase2 support)[[BR]]* Disable system migrations for an org (trustedOrgId) within an organization's (orgId) trust ring.[[BR]]* Returns 1 on success, exception thrown otherwise.[[BR]]* The user executing this method must be an Org Admin.||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: packages''' ||  ||  ||  ||  ||  ||
||  packages.getDetails(*,downloadURL)   || 0.5 ||  ||  ||  ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: schedule''' ||  ||  ||  ||  ||  ||
||  schedule.listAllActions(string sessionKey) || 0.4 || 3 ||  ||  ||  ||
||  schedule.cancelAction(string sessionKey, int actionId) || 0.4 || 3 ||  ||  ||  ||
||  schedule.listActionsForSystem(string sessionKey, int systemId) || 0.4 || 3 ||  ||  ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: supportuser''' || 0.6 ||  ||  ||  || TODO: A new API handler will be defined to support the [https://fedorahosted.org/spacewalk/wiki/Features/SupportUser SupportUser] feature.  Details will be coming as the content for Support user are finalized. ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: system''' ||  ||  ||  ||  ||  ||
||  system.listErrata(string sessionKey, int sid) || 0.3 || 3 || bbuckingham || done || Returns a list of all errata relevant to the system. ||
||  system.listErrataByType(string sessionKey, int sid, string advisoryType) || 0.3 || 3 || bbuckingham || done || Returns a list of all errata of the specified type that are relevant to the system. ||
||  system.provisionSystem(sid, kslabel, date) || 0.3 || 4 || skarmark || done ||  ||
||  system.provisionSystem(sid, kslabel) || 0.3 || 1 || skarmark || done ||  ||
||  system.comparePackageProfile(string sessionKey, int sid, string profileLabel) || 0.3 || 3 || bbuckingham || done || Compare the system to an existing package profile. ||
||  system.searchDevices(search-string) || 0.4 || 4 || jmatthews ||  || put under search.system.devices or system.search.devices ||
||  system.searchNetwork(search-string) || 0.4 || 4 || jmatthews ||  || ditto ||

||  system.createCustomValueKey() || 0.3 || 3 || coec || done  || createCustomValueKey(sessionKey, string keyLabel, string keyDescription) ||
||  system.schedulePackageRefresh(string sessionKey, int serverId, dateTime.iso860 earliestOccurrence) || 0.3 || 4 || bbuckingham || done || * Schedule a package list refresh for a system.[[BR]]* Returns 1 on success, exception thrown otherwise. ||

=== New Spacewalk 0.1 APIs ===

Below are APIs that have been included in Spacewalk 0.1, but that were not available for the Satellite 5.1 product; however, they will be incorporated in to a future Satellite release.

||  '''Task''' || '''Target Release''' ||  '''Estimate (hours)''' || '''Developer''' || '''Status''' || '''Notes''' ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: kickstart''' ||  ||  ||  ||  ||  ||
||  kickstart.list || 0.1 || 2 || jsherrill || Done ||  ||
||  kickstart.listscripts() || 0.1 || 2 || jsherrill || Done ||  ||
||  kickstart.addscript() || 0.1 || 3 || jsherrill || Done ||  ||
||  kickstart.deletescript() || 0.1 || 3 || jsherrill || Done ||  ||
||  kickstart.download() || 0.1 || 3 || jsherrill || Done ||  ||
||  kickstart.setKickstartTree(kslabel, tree_label) || 0.1 || 3 || skarmark || Done ||  ||
||  kickstart.setChildChannels(kslabel, array(chan_lablel)) || 0.1 || 3 || skarmark || Done ||  ||
||  kickstart.getPartioningScheme() || 0.1 || 2 || jortel || Done ||  ||

||  kickstart.setPartitioningScheme() || 0.1 || 3 || jortel || Done ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: org''' ||  ||  ||  ||  ||  ||
||  org.create || 0.1 || || dgoodwin || Done || ||
||  org.delete || 0.1 || || dgoodwin || Done || ||
||  org.listOrgs || 0.1 || || partha || Done || ||
||  org.listUsers || 0.1 || || partha || Done || ||
||  org.getDetails(orgName) || 0.1 || || partha || Done || ||
||  org.getDetails(orgId) || 0.1 || || partha || Done || ||
||  org.updateName || 0.1 || || partha || Done || ||
||  org.listSoftwareEntitlements || 0.1 || || dgoodwin || Done || ||
||  org.listSoftwareEntitlementsForOrg || 0.1 || || dgoodwin || Done || ||
||  org.setSoftwareEntitlements || 0.1 || || dgoodwin || Done || ||
||  org.listSystemEntitlements || 0.1 || || partha || Done || ||
||  org.listSystemEntitlementsForOrg || 0.1 || || partha || Done || ||
||  org.setSystemEntitlements || 0.1 || || dgoodwin || Done || ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: schedule''' ||  ||  ||  ||  ||  ||
||  schedule.listCompletedActions(sessionKey) || 0.1 || 2 || bbuckingham || Done ||  ||
||  schedule.listInProgressActions(sessionKey) || 0.1 || 2 || bbuckingham || Done ||  ||
||  schedule.listFailedActions(sessionKey) || 0.1 || 2 || bbuckingham || Done ||  ||
||  schedule.listArchivedActions(sessionKey) || 0.1 || 2 || bbuckingham || Done ||  ||
||  schedule.listCompletedSystems(sessionKey, aid) || 0.1 || 2 || bbuckingham || Done ||  ||
||  schedule.listInProgressSystems(sessionKey, aid) || 0.1 || 2 || bbuckingham || Done ||  ||
||  schedule.listFailedSystems(sessionKey, aid) || 0.1 || 2 || bbuckingham || Done ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: system''' ||  ||  ||  ||  ||  ||
||  system.listInactiveSystems(date) || 0.1 || 2 || jsherrill || Done ||  ||
||  system.whoRegistered(sid) || 0.1 || 1 || jsherrill || Done ||  ||
||  system.listSystemsWithPackage(id) || 0.1 || 3 || jsherrill || Done ||  ||
||  system.listSystemsWithPackage(name, version, release, epoch) || 0.1 || 3 || jsherrill || Done ||  ||
||  system.listVirtHosts() || 0.1 || 2 || jsherrill || Done ||  ||
||  system.listVirtGuests(sid) || 0.1 || 2 || jsherrill || Done ||  ||
||  system.setGuestMemory(sid, memory) || 0.1 || 2 || jsherrill || Done ||  ||
||  system.setGuestCpus(sid, cpus) || 0.1 || 2 || jsherrill || Done ||  ||
||  system.scheduleGuestAction(sid, state) || 0.1 || 4 || jsherrill || Done ||  ||
||  system.deleteSnapshot(sid, snapId) || 0.1 || 5 || jsherril || Done ||  ||
||  system.deleteSnapshots(sid) || 0.1 || 5 || jsherrill || Done ||  ||
||  system.listSnapshots(sid) || 0.1 || 5 || jsherrill || Done ||  ||
||  system.listSnapshotPackages(snapid) || 0.1 || 5 || jsherrill || Done ||  ||
||  system.listSnapshotConfigFiles(snapid) || 0.1 || 5 || jsherrill || Done ||  ||
||  system.getOsadStatus(sid) (system.getDetails()) || 0.1 || 2 || jsherrill || Done ||  ||
||  ----   ||  ||  ||  ||  ||  ||
||  '''Namespace: systemgroup''' ||  ||  ||  ||  ||  ||
||  systemgroup.listActiveSystemsInGroup(group) || 0.1 || 3 || jsherrill || Done ||  ||
||  systemgroup.listInActiveSystemsInGroup(group) || 0.1 || 3 || jsherrill || Done ||  ||

