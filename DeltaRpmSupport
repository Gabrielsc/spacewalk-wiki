= Delta RPMS =


== Tasks ==

|| Task || Estimated Hours || Assignee || Status || Notes ||
|| Delta RPM Generation || 25 ||   || ||  ||
|| Modifying repomd generation to be performed as asynchronously, not on demand || 25 ||  || || ||
|| Presto MD generation (including config option to disable) || 25 ||   || ||  ||
|| Client side testing/development  || 5 || || || ||


== Requirements ==
 1.  If a system has the presto yum plugin installed and is configured to get updates from the spacewalk server, any package update request should be  fulfilled with a delta rpm.
 2.  There shall be a way to disable delta rpms from being offered from the server.  
 3.  The system shall automatically clear old delta rpms.


== Specification == 

 * Backend
  * Generate drpms on the fly (This shouldn't be too hard, as libraries are exist to do this).  Will need to store them in a cache (/var/cache/rhn/drpms/N(0..2)/NAME/md5sum-md5sum.drpm) and have a way to clear them (possibly a script, or add it to the daemon below).  Currently there is no python api, so we will simply have to use the command line utilities from within python.
  * Generate the presto repo data.  This might be a little tricky, as we will need to be able to generate a delta rpm from every version of a package (that is in a channel) to every other version of the same package.  But generally we'll generate a presto repo file that has every combination available to the client, and then generate whichever one we need on demand.  After talking with prad, it was determined that we don't want to generate the presto information on demand, as it would take too long (which is the case with our repomd now).  Instead we want to have a process periodically checking to see if the repomd needs to be updated and update it then.  We will simply generate the presto metadata at that time as well.
  * Provide a config option to disable/enable presto rpm support on the server side (disabling the repo data generation should be good enough).

 * Client side
  * This most likely "just works".  Once we have the backend stuff to test, we can actually do some testing.  





== FAQ ==
* What is a delta rpm?
   * It is a collection of the binary diffs between all the individual files of two different versions of the same package with the rpm header of the new package prepended to the file.

* Can rpm work directly with drpms?
   * No, the full rpm must be recreated before installing.  Rpm itself has no idea what a drpm actually is and will try (and fail) to install it like a normal rpm.

* Can yum work directly with drpms themselves?
   * No, yum (with the presto yum plugin or a similiar plugin) can only work with drpms if they are in an appropriate repo.  The plugin itself recomposes the rpm into its original form before having yum install it.  

== Common Commands ==

Needed Packages: presto-utils, deltarpm, yum-presto
{{{
Create a drpm:
     makedeltarpm  oldrpm.rpm  newrpm.rpm  deltarpm.drpm 
}}}
{{{
Create drpms from a full repo:
	createdeltarpms  ./repo ./repo/DRPMS 
}}}
{{{
Reconstruct original rpm using on disk installation:
 	applydeltarpm  delta.drpm  new.rpm 
}}}
{{{
Reconstruct original rpm using an old rpm:
 	applydeltarpm  -r old.rpm  delta.drpm  new.rpm 
}}}
{{{
Create a presto repo (and the prestodelta.xml file):
	createprestorepo ./repo 
}}}
{{{
Then to finish the deal and link the prestodelta.xml to the repomod.xml file:
         modifyrepo  ./repodata/prestodelta.xml  ./repodata/ 
}}}


 
== My thoughts ==

 * I like the idea of delta rpms 'just being there' (i.e. so the user wouldn't have to do anything to get them there, or at least wouldn't have to generate them themselves and upload them to the sat).  
 * Since it does require extra cpu and memory resources to rebuild the rpm on each client, it should be an optional on the satellite to provide/build/publish deltarpms.


