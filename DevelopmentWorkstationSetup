= Intro = 

The below instructions are how to set up the Spacewalk Development Enviroment into a Red Hat Enterprise Linux 5 server.  [wiki:"DevelopmentWorkstationSetupFedora9" Future versions ] will include instructions and support for Fedora and other Linux variants.
For Fedora F10/F9 

Add the following to /etc/yum.repos.d/jpackage.repo

{{{
[jpackage]
name=jpackage-f10
baseurl=http://mirrors.dotsrc.org/jpackage/6.0/fedora-10/free/
gpgcheck=0
enabled=1
}}}



= Prerequisites =


=== Spacewalk Runtime Environment ===

In order to setup the  Spacewalk development environment, you first need to have a running version of Spacewalk installed following the instructions in [HowToInstall Spacewalk Installation Instructions].

=== Git  ===
To setup the sources follow the instructions in [GitGuide#InstallGit Install Git] and [GitGuide#ClonetheSpacewalkgitrepository clone the Spacewalk repository].


= Web Application =


=== Installation ===
 * {{{sudo /usr/sbin/rhn-satellite stop}}}
 * {{{sudo yum install ant-nodeps ant-contrib junit ant-junit java-1.6.0-openjdk-devel}}}
 * {{{sudo rpm -Uvh http://mirrors.dotsrc.org/jpackage/1.7/generic/free/RPMS/ivy-1.3.1-1jpp.noarch.rpm}}}
 * {{{cd $SPACEWALK_GIT/java}}}
 * {{{ant all, or ant clean all }}}
 * {{{ant create-webapp-dir}}}
 * {{{sudo ant install-devel (this step may only be necessary once after the initial install)}}} 
 * {{{sudo /usr/sbin/rhn-satellite start}}}

Your development environment should now be ready to go. Having problems? Check out the [DevelopmentWorkstationSetup#Troubleshooting troubleshooting] section below.

=== Search Server Setup ===
If you are going to be updating the search server java code, you would have to do the following:
 * {{{sudo /usr/sbin/rhn-satellite stop}}}
 * {{{cd $SPACEWALK_GIT/search-server}}}
 * Change what ever you need to .. Commit it in a local branch in git.
 * {{{../rel-eng/bin/tito build --test --rpm && /tmp/spacewalk-build/noarch/spacewalk-search-*.git.*.noarch.rpm }}}
 * {{{it's a good idea to wipe out the search indexes, "sudo /sbin/service rhn-search cleanindex"}}}
 * {{{sudo /usr/sbin/rhn-satellite start}}}

=== Set Permissions ===

Make sure that permissions are properly set.  If your Git repo is in your homedir, then apache and tomcat must be able to get read and execute access to not only the Git repo, but your homedir as well.  The following commands should work when run from homedir:
 * {{{[you@yourmachine ~]$ setfacl  -R  -m  u:apache:rx .}}}
 * {{{[you@yourmachine ~]$ setfacl  -R  -m  u:tomcat:rx .}}}

=== Uninstallation ===

In case you decide to undo your development environment changes and go back to running your Spacewalk.

'''NOTE:''' this operation right now is a bit dodgy

 * {{{sudo ant uninstall-devel}}}


= Deploying development schema =

This will completely drop all data from the database and recreate all tables, stored procs, etc.  Any systems, channels, or packages will no longer exist within the DB after this operation.  It is not reversible.  When it is finished, you should have a database deployed with a schema that is inline with your git checkout.

{{{ 
 /etc/init.d/rhn-satellite stop
 /etc/init.d/oracle-xe restart
 cd $SPACEWALK_GIT/schema/spacewalk 
 make satellite-clean satellite-release TBS=USERS SQLUSER=spacewalk/spacewalk@xe     
 rhn-satellite-activate --disconnected  (you may have to rename old validate-sat-cert.pl and soft link $SPACEWALK_GIT/spacewalk/admin/validate-sat-cert.pl to /usr/bin/
 /etc/init.d/rhn-satellite start
}}} 

{{{
  If pointing to an old Satellite's DB, use TBS=DATA_TBS  or you will be sorry!
}}}

{{{
  To determine if it was successful, look for
  SQL_FILE
  ---------------
  rhnsat/quit.sql
}}}


= Taskomatic =

To be able to edit Taskomatic code you simply need to create a symlink:
{{{
  cd /usr/share/rhn/lib/
  mv rhn.jar rhn.jar.bak
  ln -s ~/spacewalk/java/build/run-lib/rhn.jar rhn.jar
  service taskomatic restart
}}}

Now you can simply edit the code as desired.  To have taskomatic pick up those changes simply run 'ant' from the java directory and restart taskomatic.



= Troubleshooting =
 * catalina.out has the following error:
{{{
SEVERE: Error starting static Resources
java.lang.IllegalArgumentException: Document base /usr/share/tomcat5/webapps/rhn does not exist or is not a readable directory
        at org.apache.naming.resources.FileDirContext.setDocBase(FileDirContext.java:141)
        at org.apache.catalina.core.StandardContext.resourcesStart(StandardContext.java:3855)
        at org.apache.catalina.core.StandardContext.start(StandardContext.java:4024)
...
}}}
   This typically means the {{{tomcat}}} user can not read {{{/usr/share/tomcat5/webapps/rhn}}}, give {{{tomcat}}} user access to directory.  (See https://fedorahosted.org/spacewalk/wiki/DevelopmentWorkstationSetup#SetPermissions)

 * browse webapp and it looks plain like a webapp from 1995, usually caused by the css files not being loaded. 
{{{
[Wed Jul 16 14:56:20 2008] [error] [client 192.168.1.106] Symbolic link not allowed or link target not accessible: /var/www/html, referer: https://bugatti.usersys.redhat.com/rhn/systems/Overview.do
}}}
  The most likely culprit is actually a permissions problem for the apache user, give {{{apache}}} user access to the directory.

 * using '''tomcat6''' and getting following traceback:
{{{
org.apache.jasper.JasperException: Unable to read TLD "META-INF/c.tld" from JAR file "file:~/spacewalk/java/lib/taglibs-standard-1.1.0.jar": org.apache.jasper.JasperException: Failed to load or instantiate TagLibraryValidator class: org.apache.taglibs.standard.tlv.JstlCoreTLV
}}}
   Just remove jspapi-5.0.18.jar:
{{{
mv /usr/share/tomcat6/webapps/rhn/WEB-INF/lib/jspapi-5.0.18.jar /tmp/
}}}
   and restart tomcat.

 * tomcat starts too quickly (and browsing to the webUI gives a 404)

From IRC:
{{{
[20:41] <jsherrill> i think your rhn.xml disappeared
[20:41] <jsherrill> if you're using tomcat5 copy ~/spacewalk/java/conf/rhn.xml to /etc/tomcat5/Catalina/localhost/
[20:42] <jsherrill> for tomcat6 copy ~/spacewalk/java/conf/rhn6.xml to /etc/tomcat6/Catalina/localhost/
}}}


* Java crashes on startup (a hard JVM crash, not a normal traceback):
{{{
- remove ~/spacewalk/java/lib/ojdbc14-1.10.jar
- create simlink ~/spacewalk/java/lib/ojdbc14.jar that points to /usr/share/java/ojdbc14.jar

- unlink /var/lib/tomcat6/webapps/rhn/WEB-INF/lib/ojdbc14-1.10.jar
- create simlink /var/lib/tomcat6/webapps/rhn/WEB-INF/lib/ojdbc14.jar that points to /usr/share/java/ojdbc14.jar

- unlink ~/spacewalk/java/build/run-lib/external/ojdbc14-1.10.jar
}}}




== Still having issues? ==

Make sure there are no broken symlinks in /var/lib/tomcat5/common/lib:
{{{
  ls -l /var/lib/tomcat5/common/lib/
}}}

Also make sure your symlink is setup correctly for the webapp

{{{
ll /var/lib/tomcat5/webapps/rhn
lrwxrwxrwx 1 root root 26 Feb 18  2009 /var/lib/tomcat5/webapps/rhn -> /home/USER/spacewalk/java/rhnwebapp/
}}}

On Fedora 14 (and maybe previous Fedora versions) if the git repo is in a users home directory, the followin maybe neccessary if Apache reports "DocumentRoot must be a directory".

{{{
sudo setsebool -P httpd_enable_homedirs 1
sudo setsebool -P httpd_read_user_content 1
}}}

= Building spacewalk-java RPM =

* See here for info on rebuilding the spacewalk-java RPM: BuildingJavaRpm

= Ant problems? =

{{{
[coec@sw-pg java]$ ant
Buildfile: build.xml
     [echo] Importing buildconf/build-props-${tomcat}.xml

BUILD FAILED
/home/coec/git/spacewalk/java/build.xml:8: Cannot find buildconf/build-props-${tomcat}.xml imported from /home/coec/git/spacewalk/java/build.xml

Total time: 0 seconds
[coec@sw-pg java]$
}}}

Try 
{{{
ant -Dtomcat=tomcat6
Buildfile: build.xml
     [echo] Importing buildconf/build-props-tomcat6.xml

boot-deps:
    [mkdir] Created dir: /home/coec/git/spacewalk/java/build/boot-lib
     [echo] Symlinking ivy

init-ivy:
...
}}}


= Debugging code running in tomcat with eclipse = 

If you're running java code on your dev workstation and want to trace through it, you can easily do that with eclipse.

1.  enable debugging within tomcat:
   edit /etc/tomcat5/tomcat5.conf  and look for:
{{{
  # Turn on debugging
  #JAVA_OPTS="$JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n"
}}}

  simply uncomment the 2nd line.

2.  restart tomcat 
 service tomcat5 restart

3.  add a debugging profile in eclipse:
  a.  run -> Debug configurations   (or click the little arrow beside the bug in the toolbar and click 'debug configurations')
  b.  In the left hand list, find and double click on "Remote Java Application".  This will create a new 'profile'
  c.  Give it a name, change "Host" to whatever host you want to connect to (Maybe localhost), and make sure "port" is set to 8000
  d.  Hit apply and then close

4.  Initiate the debugger:
     Click on the little arrow beside the 'bug' in the toolbar and select the name that you gave the debug profile in the previous step.  If you open the debug perspective (Window -> Open Perspective -> Debug)  you should see a debug tab showing you connected to tomcat.

5.  Set break points.  
   Simply add breakpoints by double clicking on the left grey strip running from top to bottom beside the code.

6.  Run some code.  Simple browse the webUI or do whatever for it to run over that section of the code, and the debugger will activate.

= Debugging code running in taskomatic with eclipse =

1. edit your /etc/rhn/default/rhn_taskomatic_daemon.conf and add following lines:

{{{
wrapper.java.additional.2=-Xdebug
wrapper.java.additional.3=-Xrunjdwp:transport=dt_socket,address=8001,server=y,suspend=n

wrapper.java.detect_debug_jvm=TRUE
}}}

2. restart taskomatic and follow the tomcat debugging procedure with one change: connect port is 8001