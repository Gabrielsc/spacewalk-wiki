NOTE: WORK IN PROGRESS, DONT RECOMMEND YOU FOLLOW THIS YET AS ITS VERY OLD.

<pre>
Introduction
-------------
This is a small document to help developers configure Eclipse for
use with Spacewalk's java code.  

For now, I use Eclipse to create and edit classes and run unit tests.
You will still need to go to the command line to make sure things still
work in the common build environment using Ant.

Install Eclipse from GZIP file
------------------------------

Go here to grab the latest rev of eclipse.  Make sure you get the gtk version

  http://www.eclipse.org/downloads/

Download Eclipse SDK 3.X.X. to /tmp, where .X.X translates to the version they display on their downloads page.  Make sure in the below commands that you substitute the proper version.

tar/gunzip the downloaded file:

  # tar xvzf eclipse-SDK-3.X.X-linux-gtk.tar.gz

This will create a new subdir with a bunch of files in ./eclipse

Now, as root, move ./eclipse to /opt/eclipse-3.X.X 

  # su root
  # mv ./eclipse /opt/eclipse-3.X.X
  # cd /opt
  # ln -s eclipse-3.X.X eclipse

If you downloaded / extracted this to a directory below your home directory, you will not be able to see it once you become root.  You will need to move it to /tmp, then become root and move it to /opt.

Now skip down below to the Create Project Directory step.


Setup the Project directory
----------------------------
1) Create a directory called workspace in your home directory

   cd ~/
   mkdir workspace

2) In that workspace directory, create a symlink to your rhnjava directory.
   NOTE: assumes your checkout is in ~/rhn-java

   cd ~/workspace
   ln -s ~/rhn-java .

2.5) cd to rhn-java.  We use ivy to resolve our jar dependancies.  Run the following cmd below to properly setup some of your .classpath entries.

   
   ant gen-eclipse

3) Copy eclipse support files from rhn-java/eng/java/conf to the root of your rhn-java checkout.
   NOTE: DO NOT COPY THE XML FILES

   cd ~/rhn-java
   cp eng/java/conf/eclipse/.project .
   cp -R eng/java/conf/eclipse/.externalToolBuilders .

4) Start Eclipse.

   /opt/eclipse/eclipse

5) Once, Eclipse is started setup the project:

   - File -> New Project
   - Click Java Project
   - Click Next
   - Check "Create project in workspace is checked"
   - Check "Create separate source and output folders are checked"
   - Then type in the name of your symlink, i.e. rhn-java in the Project Name.
     * Ensure the directory under location points to your workspace directory
       /home/devel/username/workspace/rhn-java
   - The following should appear at the bottom:

     The specified external location already exists. If a project is created
     in this location, the wizard will automatically try to detect existing
     sources and class files and configure the classpath appropriately.
   
   - Click Next
   - Click Finish

6) Configure RHN Java libraries:

   - Right mouse click on the newly created Java project
   - Click Properties
   - In the "Properties for rhn-java" dialog click on "Java Build Path"
   - Click the Libraries tab
   - Select rhnjava library
   - Click Edit...
   - In the "Edit Library" dialog, check rhnjava
   - Click User Libraries... button
   - Ensure rhnjava is highlighted, click the Import... button
   - Browse to the ~/rhn-java/conf/eclipse/rhn_eclipse_libraries.xml
   - Click OK
   - Click OK
   - Click Finish, to return to the "Properties for rhn-java" dialog.
   - Click OK

7) We use assertions in our code which requires a compiler option to be 
   set.  Do the following:
   
   Window -> Preferences -> Java -> Compiler -> Compliance and Classfiles: 
   
   uncheck "use default compliance settings"
   Select 1.4 for all of the drop downs:

   Compiler compliance level: 1.4
   Generated .class files compatibility: 1.4
   Source compatibility: 1.4
   
   Also: Window > Preferences > Java > Installed JREs, select the JRE you 
   are using, hit Edit and add -ea as a default VM arg
   
   Its recommended that you do this so eclipse will catch any runtime 
   assertion errors that your unit tests may have forgotten.

You are ready to build the project.  Project -> Build All.

Code generation
----------------

If you want to configure Eclipse to generate code to match the coding
standards follow the following steps.

Configure Code Formatter:

1) Click Window -> Preferences
2) In the Preferences dialog, Click Java -> Code Style -> Code Formatter
3) Click the Import... button.
4) Browse to the ~/rhn-java/conf/eclipse/code_formatter_rhn.xml
5) Click OK

Configure Code Templates:

1) Click Window -> Preferences
2) In the Preferences dialog, Click Java -> Code Style -> Code Templates
3) Select Comments
4) Click the Import... button.
5) Browse to the ~/rhn-java/eng/java/conf/eclipse/code_templates_comments.xml
6) Click OK
7) Select Code
8) Click the Import... button.
9) Browse to the ~/rhn-java/eng/java/conf/eclipse/code_templates_code.xml
10) Click OK

Configure import statement order:

1) Click Window -> Preferences
2) In the Preferences dialog, Click Java -> Code Style -> Organize Imports
3) Click the Import... button.
4) Browse to the ~/rhn-java/eng/java/conf/eclipse/rhn.importorder
5) Click OK


Getting JUnit to run in eclipse:
--------------------------------
You need to add a few libararies to your path to get eclipse to 
run JUnit.  Right click on your top level entry in your project.  Click
Properties:

1) Go to Java Build Path.
2) Click "Add Class Folder"
3) Select rhn-java/code/webapp.  Make sure it shows up in the list.
4) Add the following jars by clicking "Add JARs":
   rhn-java/buildconf/tempjars/antlr-2.7.5H3.jar
   rhn-java/buildconf/tempjars/asm.jar
   rhn-java/buildconf/tempjars/asm-attrs.jar
   rhn-java/buildconf/tempjars/cglib-2.1.2.jar
   rhn-java/buildconf/tempjars/hibernate3.jar
   /usr/share/java/logdriver.jar
   rhn-java/buildconf/tempjars/strutstest-2.1.3.jar
   
5) You should be able to right click on a FooTest class and
   say "Run As -> Junit Test"
   

Performance issues
-------------------
In order to increase Eclipse's performance, add the following to your
/etc/eclipse.conf file, overriding any other memory settings:

    VM_ARGS="-Xverify:none -Xms192M -Xmx256M"

The key one is the verify:none which keeps the VM from validating
all of the class files during load.

If using the Sun JVM, make the following tweaks:

 VM_ARGS="-Xverify:none -XX:+UseParallelGC -XX:PermSize=20M -XX:MaxNewSize=32M -XX:NewSize=32M -Xms192M -Xmx256M"


Another thing that will help dramatically is to use the Sun
JVM.  Install the Sun JVM (don't use the jpackage RPM because
it conflicts with the IBM rpm).  Then change the JAVACMD in your
/etc/eclipse.conf i.e.:

    JAVACMD="/usr/java/j2sdk1.4.2_06/bin/java"

The above command uses the Sun VM installed using the Sun RPM.
</pre>