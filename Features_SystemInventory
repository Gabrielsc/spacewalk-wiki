= System Inventory =

=== Reviewed by: ===

== Overview ==

This feature refers to our ability to correctly identify the operating system, version, and virtualization capabilities/status of hosts registered to Spacewalk. 

== Requirements ==

 1. Identify the following operating systems and versions:
  1. Red Hat Enterprise Linux: 4 (AS, ES, ...), 5 (Server, Desktop)
  1. Fedora (10+)
  1. CentOS (4, 5)
  1. Solaris ('''TODO''': what versions do we want to support?)
  1. "Unknown" system (for everything we can't identify)
 1. System architecture: x86, x86_64, ppc, s390x, etc.
 1. Virtualization Status
  1. Virtualized guest (Xen, KVM, VMware)
    1. Can we also detect IFL, and Hyper-V guests?
    1. Identify and associate with host system.
      1. '''TODO''': Is this possible? Safe?
      1. Deal with scenario where host system is not registered.
      1. Deal with scenario where host system is registered but not to the same Spacewalk/Satellite.
  1. Virtualization capable host (Xen full/para-virt, KVM full-virt)
 1. Idenfity number of CPUs and CPU cores.
 1. Allow searching of this data in web UI.
  1. '''TODO''': Need examples of specific searches to see where to go with this. Take a look at current advanced search screen to see what we have to work with.
 1. API should allow mining of data for permutiations of hardware, OS, virt capabilities/state, and system grouping (?).
  1. '''TODO''': Need examples.


== Other Feature Impact ==

TBD

== Proposed Implementation ==

 1. Create new client side Python library whose sole purpose is to identify the information above.
  1. Modify RHN client tools to require this library as a dependency. (implies this must be added to base installs of RHEL)
  1. Separate library to allow for re-use in candlepin.
  1. Identify rpm based distros by first checking for rpm command, and then redhat-release and equivalents.
  1. '''TODO''': How to identify Solaris?
 1. Modify client tools to use new library and supply this information to Spacewalk/Satellite very early during registration.
  1. Must not require this if communicating with hosted.
 1. Schema
  1. Modify to store this information in a format that can accommodate future changes or additions.
  1. Sync up with existing storage of architecture, CPU info.
 1. Backend
  1. Accept the new incoming data, populate database.
  1. Again, ensure this happens before entitlement checks.
 1. Web UI
  1. Under Systems -> (system) -> Details -> Overview in the "System Info" section:
   1. Add "Operating System". (Fedora 10, Red Hat Enterprise Linux 5 Server, CentOS 5)
   1. Already display if system if a para-virt host/guest, update to include include KVM and clearly differentiate between the two.
  1. Under Systems -> (system) -> Details -> Hardware:
   1. Update General section with number of CPU cores.
   1. Add virtualization section, display virtualization capabilities.  (KVM, Xen full-virt, Xen para-virt)
  1. Allow for searching/filtering, expand search interface "Field to Search" to include:
   1. Operating System
   1. Virtualization Capabilities (Xen/KVM?)
   1. Guest systems (somehow...)
   1. Host systems (somehow)
 1. API
  1. Allow for searching for various permutations of the new pieces of inventory information. 
  1. '''TODO''': Specific API calls to implement.

=== Known Issues ===

 * How do we populate this information for pre-existing systems on an upgraded install?
 * Can an administrator manually override the data our library determine to be accurate in the UI?

=== Future Enhancements ===

 * Moving our existing hardware detection code into this library seems like a good idea.
 * Expand client side library to detect other operating systems and versions. (Debian, Ubuntu, etc)
 * Expand client side library to detect other virtualization technologies. 

== Mockups ==

'''TODO'''

== Tasks ==


|| Description || Estimate || Confidence ||
||  || || ||
||  || || ||

== Test Notes ==

 * New library will have it's own unit testing framework. Must be able to mock out other operating systems somehow to increase coverage.
 * RHN client tools do not currently have much in the way of unit test framework, these will largely be left to manual testing.
 * Backend code unit tests can be used to cover new logic. Will have a dependency on the new library which may be tricky if testing from source. (is new library installed? is it part of spacewalk.git and needs to be added to python path?)
 * Java web UI and API can be tested using existing unit test and API test framework respectively.

== Risks/Concerns ==

