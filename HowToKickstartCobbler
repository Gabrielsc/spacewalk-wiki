== Introducing Spacewalk and Cobbler ==

Version 0.4 of Spacewalk adds siginificantly enhanced operating system installation capabilities as Spacewalk now includes integration with the [http://fedorahosted.org/cobbler Cobbler] Linux installation server.

Some new features include:

 * Installing and manage qemu/KVM based virtual machines and Xen fullvirt installs (previously, only Xen paravirt was supported)
 * Installing guests to LVM backed storage
 * Creating guests with multiple disks (question: does Spacewalk surface this?)
 * Creating guests with multiple virtual NICs on multiple bridges (question: does Spacewalk surface this?)
 * First-class support for Fedora and CentOS instead of just RHEL
 * Evolving support for Debian, SuSE, and Ubuntu (limited exposure in Spacewalk -- just template editing and PXE, no virtual guests?)
 * Automatic PXE setup with auto-generated PXE menus for bare metal deployments
 * Integrated DHCP and DNS management (can be enabled, but is not surfaced in Spacewalk)
 * Powerful kickstart file templating using Cheetah (see https://fedorahosted.org/cobbler/wiki/KickstartTemplating and https://fedorahosted.org/cobbler/wiki/KickstartSnippets)
 * other features (see [http://fedorahosted.org/cobbler Cobbler Wiki])

== Quick Start Guide ==

 1. Some context
    a. This document is intended primarily for Spacewalk users.  While Spacewalk's new kickstart capabilities are based on Cobbler, and Cobbler itself offers orders of magnitude more flexibility in the engineering a Linux installation environment, this document purposefully does not explore those many avenues.  Rather, it provides a starting point from which one can get started using Spacewalk with Cobbler.  If you want to explore Cobbler in more detail, visit [https://fedorahosted.org/cobbler its project site] - it has an extensive wiki and a great deal of documentation available.
    a. In addition, this document does not attempt to exhaustively describe all of the paths by which one *can* set up Spacewalk to work with Cobbler - rather (again) it provides a starting point and an approach that's known to work.
 1. Create a Distro
    a. Some prep work
	1. You're going to need some distribution isos and some loop mounts of them to get the ball rolling here, so...
		a. make a directory /var/iso-images
		a. download a copy of Fedora-9-i386-DVD.iso to that directory
		a. make a directory /var/distro-trees
			* within that directory make a directory Fedora-9
		a. mount -oloop /var/iso-images/Fedora-9-i386-DVD.iso /var/distro-trees/Fedora-9
			* You may find it useful to include an entry in /etc/fstab to ensure this mount persists across reboots
        1. Create a Spacewalk channel for the distribution you wish to kickstart (if you have one set up already, go to the next step)
		a. Select Channels|Manage Software Channels and select "+ create new channel"
		a. Fill in the required fields as described - call it "Fedora 9" with a label "fedora-9"
		a. Populate the channel with packages using rhnpush
			* e.g. rhnpush --server localhost -u admin -p spacewalk  --channel fedora-9 /var/distro-trees/Fedora-9/Packages/*.rpm
			* Note that this step takes "a while" - don't be alarmed - just take a *long* lunch. We're working on the speed issue for the next release.
	1. Having made the Spacewalk base channel, you must now create a child channel that contains some kickstart helper tools
		a. Select Channels|Manage Software Channels and select "+ create new channel"
		a. Fill in the required fields as described - call it "Fedora 9 with Tools" and label "fedora-9-with-tools"
		a. Download the following packages from http://spacewalk.redhat.com/yum/0.4:
			* pyOpenSSL
			* rhnlib
			* libxml2-python
			* spacewalk-koan*
		a. Populate your new child channel with these rpms using  "rhnpush --server localhost -u admin -p spacewalk  --channel fedora-9-with-tools /path/to/the/helper/rpms/*.rpm"
		a. You're now ready to create a kickstart distro
    a. Select Systems|Kickstart|Distributions and select "+ create new distribution"
	1. On the "Create Kickstart Distribution" page, fill in the items as described
		a. Distribution label in this case might be Fedora-9
		a. Tree path should be /var/distro-trees/Fedora-9
		a. Base channel should be "Fedora 9 with Tools"
		a. Installer generation should be Fedora 9 in this case.
		a. Once you've pressed the "Create Kickstart Distribution" button you'll see a table that includes your new entry.
		a. If you run "cobbler distro list" at your spacewalk system's command line, you'll now see these entries in addition to any others you may have already defined.  These are named automatically by Spacewalk using the pattern <spacewalk distribution tag>:<organization ID>:<organization name>
			* Fedora-9:1:Spacewalk-Public-Cert
			* Fedora-9:xen:1:Spacewalk-Public-Cert

 1. Having created your kickstartable distribution, you can now create a new Spacewalk kickstart profile:
    a. select Systems|Kickstart|Profiles and then select "+ create new kickstart profile"
    a. Give your new profile a label - in this case "Fedora-9-No-Tools"
    a. Select the base channel you created earlier
    a. Select the kickstartable tree you created earlier
    a. Select the virtualization type you intend the target machine to utilize.
    a. Click "Next", and on the next screen just accept the "Default Download Location" and click "Next"
    a. Give you new machine type a default root password, and then click "Finish"
    a. If you run cobbler profile list you'll now see this entry in addition to those you've already defined:
            * Fedora-9:1:Spacewalk-Public-Cert
 1. Use Spacewalk to kickstart a system with your profiles
     a. Kickstarting  "bare-metal" machines
        1. You can kickstart "bare-metal" machines (actual physical machines without an OS installed) with spacewalk provided you've set up a few things:
            a. On your network
                1. Setup a dhcp server that sets the ''next-server'' variable to point to your spacewalk machine
                1. (optional) ensure that the IP address of the hosts you'll be kickstarting are resolvable via DNS.  This is entirely optional, however minus this you may notice some delays during operating system installation.
                1. (optional) make sure your spacewalk machine can be found in DNS.  Again, this is entirely optional, but may speed installation.
            a. On the spacewalk server
                * edit /etc/xinetd.d/tftp and change the value of "disabled" to "no".  
                * generally, running "cobbler check" is an excellent way to see if your install server configuration has any problems like this that should be addressed.
                * Bear in mind that by enabling tftp you will be activating a service on an open port - it may be worth while to revisit your firewall rules if you're unsure about security.
            a. A fairly well documented example of how to set up a small kickstart lab with Spacewalk can be found [https://fedorahosted.org/spacewalk/wiki/kickstartingLabNetworkingSetup here]
        1. Bare metal machines can be kickstarted in one of two ways:
            a. * Note that this is an area where we've yet to add proper functionality to Spacewalk; at this point it's necessary for you to interact with the cobbler command line, and you'll see no indication of the existence of the system in question in the Spacewalk UI. We will most definitely remedy this in a future release.
            a. Semi-automatically (interacting with the PXE menu)
                1. Connect a machine to the network, assuming DHCP is available and next-server for the network is set to point to the Spacewalk server
                1. Power on the machine.
                    a. In most situations, a machine whose disks have no bootable operating system will eventually end up trying to boot over the network but:
                    a. The BIOS configuration can be set to boot over the network /first/ (however see note below regarding Cobbler's "pxe_just_once" parameter).
                1. Choose what profile you want to install from the PXE menu.
                1. The box will finish installation automatically
            a. Fully automatically (with some prep work).
                1. Get a command line on your spacewalk server
                1. Run this cobbler command: '''cobbler system add --name <nameOfYourSystem> --mac <mac addr of netboot interface> --profile <a profile from 'cobbler profile list'>'''.   
                1. Boot the machine.   The machine's BIOS should be set such that a PXE bootstrap will occur.  The install will continue without any user interaction.
            a. '''We need your input! '''  As we've gone down the path of incorporating cobbler's superior provisioning capabilities into Spacewalk, it's become clear that there are some areas where it's just not obvious what our priorities should be as we advance baremetal provisioning.   In all cases, this basically comes down to use cases and questions about workflow.  We've started a [wiki:bareMetalBrainstorming provisioning brainstorming page here] - please take some time to read and reflect and add your thoughts - it's a pretty big topic and we'd like to ensure our development focus gets the biggest bang for the buck up front.
        a. Kickstarting machines that already have an OS on them
	   1. With koan:  koan --replace-self --server=cobbler.example.org [--profile=profile-name] [--system=system-name]
	   1. In Spacewalk
       
Virtual machines:

Koan can be run on any Spacewalk managed machine to install new VMs.

{{{

man koan, read the instructions for --virt

}}}

If you use profiles set up in Spacewalk, virtual machines will be registered to the Spacewalk server automatically. 

== Cobbler Templating Variables, Kernel Options, and how they can help ==

 * How to add variables to Kickstart Distributions, Profiles and Systems in the Spacewalk GUI
 * How to do the same in Cobbler
 * How to use these variables in a kickstart file
    * Read https://fedorahosted.org/cobbler/wiki/KickstartTemplating and https://fedorahosted.org/cobbler/wiki/KickstartSnippets

== Upload your own Kickstart File ==

 * Discussion of new 'upload' mode of creating a kickstart profile
 * How this differs from the 'wizard' mode, and cobbler implications
 * Moving from 'wizard' mode to the full templating mode
 * Details where these files are stored on the file system

== How Integration Works ==

Spacewalk and Cobbler integration is uniquely flexible: relevant elements of object definition - distros, profiles, and systems - are stored across both system's databases.  Spacewalk's awareness of these objects is both by virtue of records keeps for and by itself that contain information germane to Spacewalk level management, and by virtue of a UID arrangement it maintains with Cobbler for each of these types of objects for access to Cobbler level detail.

Essentially, object definition is both split and shared thanks to an XMLRPC-based protocol. As far as configuration is concerned in XMLRPC communication between Spacewalk and Cobbler, with one exception (Cobbler back-authentication to Spacewalk), Spacewalk is always the "client", and the client presents UIDs generated by Cobbler as the primary key for the various object types being discussed in XMLRPC conversations.

This affords you a great deal of flexibility as to how much (or little) you interact directly with Spacewalk and Cobbler.

As mentioned above, there is one exception to the "Spacewalk is always the 'client'" rule of thumb. It's best to understand what's going on there before we continue, so here's the deal in a nutshell:  Every time Spacewalk asks Cobbler to do something via XMLRPC, Cobbler makes and XMLRPC call *back* to Spacewalk to assure itself that the XMLRPC call is legitimate.  This is made possible in part by the fact that when you ran spacewalk_setup, Spacewalk set up a few variables in Cobbler's settings file that help it do this:

 * redhat_management_server - this is the hostname (preferable) or ip address of the Spacewalk system that Cobbler should expect XMLRPC calls to be coming from
 * redhat_management_type - in the case of Spacewalk, this will be set to "site", signifying that the Cobbler instance is running on either an RHN Satellite or a Spacewalk instance. 

The call sequence is
{{{
    spacewalk_url = "https://%s/rpc/api" % server
    client = xmlrpclib.Server(spacewalk_url, verbose=0)
    valid = client.auth.checkAuthToken(username,password)
}}}
with '''username''' and '''password''' coming from [PARTHA].  So, bear in mind that this little authentication callback thing is part of every XMLRPC call Spacewalk makes to Cobbler. With that in mind:

The following describes in some detail the interplay between the two systems as regards Distros, Profiles, and Systems.  Bear in mind however that Cobbler holds a fair number of relevant default values from its own installation.  Spacewalk only sets Cobbler parameters to the extent required to cause Cobbler to work with Spacewalk - there's much more going on with Cobbler that this document won't cover.  If you need more detail, ''man cobbler''!

 * When you create a '''Distribution''' in the Spacewalk GUI, you make a corresponding ''pair'' of '''distro'''s in Cobbler:
    * Two XMLRPC calls are made to Cobbler to create two versions of a distro: one with a Xen kernel, one without.  The call passes:
        * http_server and http_port set to point to the spacewalk/cobbler server's apache instance
        * distro_name set to <Spacewalk Distribution Label>:<spacewalk organization id>:<spacewalk organization name>
        * ks_meta with the key-value pair "media_path"=><absolute path to distro tree in web space on the sw/cobbler server>
        * initrd set to the absolute path to the initrd for the distribution in question - calculated by spacewalk
        * kernel set to the absolute path to the kernel for the distribution in question - calculated by spacewalk
    * When Cobbler processes the creation request, it generates UIDs for the Xen and non-Xen distros in question.   As mentioned above, these UIDs form the tie that binds Spacewalk's '''Distribution''' to Cobbler's '''distro''' - as long as the two exist (and unless you explicitly disable the mechanism manually in Cobbler), these UIDs serve to uniquely identify each distro.
    * On the Spacewalk side, the Cobbler distro UIDs are stored together with a Spacewalk Organization ID, the distribution's label text, the absolute path to the distribution tree's root (which, in the case of a Spacewalk managed distribution, is a web-space path to Spacewalk package management logic - ''not'' a plain old directory of files on disk), the channel id in which the distribution's  packages reside, an RHNKSTREETYPE reference indicating that the distribution is managed by Spacewalk, and an RHNINSTALLTYPE reference indicating more specifically the type of installation tree the distro uses (e.g. RHEL_5 or Fedora_10).
    * Note that if you're managing the distro entirely from Spacewalk, the fact of the existence of the ''two'' distros (Xen and non) in Cobbler will be transparent to you.  If you happen to select Xen virtualization, the Xen version gets used, else the other.
 * When you create a '''Kickstart Profile''' in the Spacewalk GUI, you make a corresponding '''profile''' in Cobbler:
        * One XMLRPC call is made to Cobbler to create a '''profile'''.  The call passes:
            * 
        * On the Spacewalk side, an RHNKSDATA record is created that records the following facts:
            * The kickstart type (wizard, unless you upload your own ks file - see below)
            * The spacewalk organization ID *
            * The profile's label text
            * Any comments associated with the profile
            * Whether or not the profile is active
            * Whether or not the kickstart process should write output of custom post scripts to /root/ks-post.log
            * Whether or not the kickstart process should write output of pre- scripts to /root/ks-pre.log
            * Whether or not the kickstart process should write ks.cfg and all %include fragments to /root/
            * The Cobbler UID for the profile
            * Any additional arguments you might wish to pass to the anaconda (kickstart) kernel
            * Any additional arguments you might wish to pass to the installed kernel
            * Whether or not this profile should be considered the default one for the organization
 * When and why we create cobbler system records.
 * What happens when the user creates cobbler objects and when they show up in Spacewalk, and where these operations are limited
 * taskomatic's job in syncing changes from spacewalk to cobbler
 * taskomatic's job in syncing changes from cobbler to cobbler

== Cobbler Tips And Tricks ==

 * Cobbler editing of fields in Spacewalk through the cobbler command line
     * see "man cobbler" for more information.
 * PXE features in more depth
   * PXE boot loop prevention and all about BIOS order
      * If your machines are set up to PXE ahead of the local disks in BIOS order, pxe_just_once /must/ be set in /etc/cobbler/settings to avoid install loops.
      * Any custom kickstart templates must reference $kickstart_done in %post to make use of this feature.
 * Virt features in more depth
 * cobbler power management (integration in a future release?)
 * cobbler dhcp/dns management
 * cobbler replicate and it's use in Spacewalk context
 * other cobbler features you might find interesting


