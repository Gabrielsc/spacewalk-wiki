== Introducing Spacewalk and Cobbler ==

Version 0.4 of Spacewalk has improved installation abilities since Spacewalk now includes the [http://fedorahosted.org/cobbler Cobbler] install server.

These new features include:

 * Installing and manage qemu/KVM based virtual machines and Xen fullvirt installs (previously, only Xen paravirt was supported)
 * Installing guests to LVM backed storage
 * Creating guests with multiple disks (question: does Spacewalk surface this?)
 * Creating guests with multiple virtual NICs on multiple bridges (question: does Spacewalk surface this?)
 * First-class support for Fedora and CentOS instead of just RHEL
 * Evolving support for Debian, SuSE, and Ubuntu (limited exposure in Spacewalk -- just template editing and PXE, no virtual guests?)
 * Automatic PXE setup with auto-generated PXE menus for bare metal deployments
 * Integrated DHCP and DNS management (can be enabled, but is not surfaced in Spacewalk)
 * Powerful kickstart file templating using Cheetah (see https://fedorahosted.org/cobbler/wiki/KickstartTemplating and https://fedorahosted.org/cobbler/wiki/KickstartSnippets)
 * other features (see [http://fedorahosted.org/cobbler Cobbler Wiki])

== Quick Start Guide ==

Here are some setup instructions for using Cobbler with Spacewalk.  Note that these instructions are different from the regular [https://fedorahosted.org/cobbler/wiki/UsingCobblerImport cobbler setup instructions] because Spacewalk also requires that you push the RPMs into Spacewalk, not just into Cobbler.   Many of the steps below are for that process.

 1. Create a Distro
    a. Some prep work
	1. You're going to need some distribution isos and some loop mounts of them to get the ball rolling here, so...
		a. make a directory /var/iso-images
		a. download a copy of Fedora-9-i386-DVD.iso to that directory
		a. make a directory /var/distro-trees
			* within that directory make a directory Fedora-9
		a. mount -oloop /var/iso-images/Fedora-9-i386-DVD.iso /var/distro-trees/Fedora-9
			* You may find it useful to include an entry in /etc/fstab to ensure this mount persists across reboots
                        * Cobbler does not require this.   Spacewalk channels /might/  (FIXME)
        1. Create a Spacewalk channel for the distribution you wish to kickstart (if you have one set up already, go to the next step)
		a. Select Channels|Manage Software Channels and select "+ create new channel"
		a. Fill in the required fields as described - call it "Fedora 9" with a label "fedora-9"
		a. Populate the channel with packages using rhnpush
			* e.g. rhnpush --server localhost -u admin -p spacewalk  --channel fedora-9 /var/distro-trees/Fedora-9/Packages/*.rpm
			* Note that this step takes "a while" - don't be alarmed - just take a *long* lunch. We're working on the speed issue for the next release.
	1. Having made the Spacewalk base channel, you must now create a child channel that contains some kickstart helper tools
		a. Select Channels|Manage Software Channels and select "+ create new channel"
		a. Fill in the required fields as described - call it "Fedora 9 with Tools" and label "fedora-9-with-tools"
		a. Download the following packages from http://spacewalk.redhat.com/yum/0.4:
			* pyOpenSSL
			* rhnlib
			* libxml2-python
			* spacewalk-koan*
		a. Populate your new child channel with these rpms using  "rhnpush --server localhost -u admin -p spacewalk  --channel fedora-9-with-tools /path/to/the/helper/rpms/*.rpm"
		a. You're now ready to create a kickstart distro
                a. (FIXME) shouldn't this be automatic?
    a. Select Systems|Kickstart|Distributions and select "+ create new distribution"
	1. On the "Create Kickstart Distribution" page, fill in the items as described
		a. Distribution label in this case might be Fedora-9
		a. Tree path should be /var/distro-trees/Fedora-9
		a. Base channel should be "Fedora 9 with Tools"
		a. Installer generation should be Fedora 9 in this case.
		a. Once you've pressed the "Create Kickstart Distribution" button you'll see a table that includes your new entry.
		a. If you run "cobbler distro list" at your spacewalk system's command line, you'll now see these entries in addition to any others you may have already defined.  These are named automatically by Spacewalk (FIXME: explain what "Public Cert" means and what "1" means):
			* Fedora-9:1:Spacewalk-Public-Cert
			* Fedora-9:xen:1:Spacewalk-Public-Cert

 1. Having created your kickstartable distribution, you can now create a new Spacewalk kickstart profile:
    a. select Systems|Kickstart|Profiles and then select "+ create new kickstart profile"
    a. Give your new profile a label - in this case "Fedora-9-No-Tools"
    a. Select the base channel you created earlier
    a. Select the kickstartable tree you created earlier
    a. Select the virtualization type you intend the target machine to utilize.
    a. Click "Next", and on the next screen just accept the "Default Download Location" and click "Next"
    a. Give you new machine type a default root password, and then click "Finish"
    a. If you run cobbler profile list you'll now see this entry in addition to those you've already defined:
            * Fedora-9:1:Spacewalk-Public-Cert
            * FIXME: explain naming convention
 1. Use Spacewalk to kickstart a system with your profiles
     a. Kickstarting  "bare-metal" machines
        1. You can kickstart "bare-metal" machines (actual physical machines without an OS installed) with spacewalk provided you've set up a few things:
            a. On your network
                1. Setup a dhcp server that set the next-server variable to point to your spacewalk machine
                1. (optional) make sure your spacewalk machine can be found in DNS.
            a. On the spacewalk server
                * edit /etc/xinetd.d/tftp and change the value of "disabled" to "no"
                * generally, running "cobbler check" is an excellent way to see if your install server configuration has any problems like this that should be addressed.
            a. A fairly well documented example of how to set up a small kickstart lab with Spacewalk can be found [https://fedorahosted.org/spacewalk/wiki/kickstartingLabNetworkingSetup here]
        1. Bare metal machines can be kickstarted in one of two ways:
            a. * Note that this is an area where we've yet to add proper functionality to Spacewalk; at this point it's necessary for you to interact with the cobbler command line, and you'll see no indication of the existence of the system in question in the Spacewalk UI. We will most definitely remedy this in a future release.
            a. From the PXE menu
                1. Connect a machine to the network, assuming DHCP is available and next-server for the network is set to point to the Spacewalk server
                1. Power on the machine.   The BIOS configuration should be set to boot over the network /first/ for maximum flexibility.  If not, select PXE boot from the menu.  Your choice.
                1. Choose what profile you want to install from the PXE menu.
                1. The box will finish installation automatically
            a. Fully automatically (with some prep work).
                1. Get a command line on your spacewalk server
                1. Run this cobbler command: '''cobbler system add --name <nameOfYourSystem> --mac <mac addr of netboot interface> --profile <a profile from 'cobbler profile list'>'''.   
                1. Boot the machine.   The install will continue without any user interaction.
            a. '''We need your input! '''  As we've gone down the path of incorporating cobbler's superior provisioning capabilities into Spacewalk, it's become clear that there are some areas where it's just not obvious what our priorities should be as we advance baremetal provisioning.   In all cases, this basically comes down to use cases and questions about workflow.  We've started a [wiki:bareMetalBrainstorming provisioning brainstorming page here] - please take some time to read and reflect and add your thoughts - it's a prety big topic and we'd like to ensure our development focus gets the biggest bang for the buck up front.
        a. Kickstarting machines that already have an OS on them
	   1. With koan:  koan --replace-self --server=cobbler.example.org [--profile=profile-name] [--system=system-name]
	   1. In Spacewalk
       
Virtual machines:

Koan can be run on any Spacewalk managed machine to install new VMs.

{{{

man koan, read the instructions for --virt

}}}

If you use profiles set up in Spacewalk, virtual machines will be registered to the Spacewalk server automatically. 

== Cobbler Templating Variables, Kernel Options, and how they can help ==

 * How to add variables to Kickstart Distributions, Profiles and Systems in the Spacewalk GUI
 * How to do the same in Cobbler and how to use these variables in a kickstart file
    * Read https://fedorahosted.org/cobbler/wiki/KickstartTemplating and https://fedorahosted.org/cobbler/wiki/KickstartSnippets

== Upload your own Kickstart File ==

 * Discussion of new 'upload' mode of creating a kickstart profile
 * How this differs from the 'wizard' mode, and cobbler implications
 * Moving from 'wizard' mode to the full templating mode
 * Details where these files are stored on the file system

== How Integration Works ==
'''note - don't count on the accuracy of this section yet - there is much construction dust here'''

Spacewalk and Cobbler integration is decidedly an interplay: elements of object definition - distros, profiles, and systems - are stored across both system's databases.  Spacewalk's awareness of these objects is both by virtue of records it keeps that contain information germane to Spacewalk level management, and by virtue of a UID arrangement it maintains with Cobbler for each of these types of objects for access to Cobbler level detail.  In a real sense object definition is both split and shared thanks to an XMLRPC-based protocol.  This affords you a great deal of flexibility as how much (or little) you interact directly with Spacewalk and Cobbler.

The following describes in some detail the "interplay" between the two systems by virtue of a cataloging of which data lives where for each of the key object types - Distros, Profiles, and Systems.

 * When you create a Distro in the Spacewalk GUI, what happens behind the scenes amounts to this:
    * Two XMLRPC calls are made to Cobbler to create two versions of a distro (one with a Xen kernel, one without) with:
        * http_server and http_port set to point to the spacewalk/cobbler server's apache instance
        * distro_name set to <Spacewalk Distribution Label>:<spacewalk organization id>:<spacewalk organization name>
        * ks_meta with the key-value pair "media_path"=><absolute path to distro tree in web space on the sw/cobbler server>
        * initrd set to the absolute path to the initrd for the distribution in question - calculated by spacewalk
        * kernel set to the absolute path to the kernel for the distribution in question - calculated by spacewalk
    * When cobbler processes the creation request, it generates UIDs for the Xen and non-Xen distro in question.  These are stored both in Cobbler and in Spacewalk.  From the point of distro creation on, these UIDs maintain a logical link between spacewalk and cobbler for the distro in question; any aspect of the distro can be changed - the UID ensures that the conversation continues to be about the same thing.
    * On the spacewalk side, the cobbler distro UIDs are stored together with a spacewalk org id, the distro's label text, the absolute path to the distro tree's root, the channel id in which the distros packages reside, an RHNKSTREETYPE reference indicating that the distribution is managed by Spacewalk, an RHNINSTALLTYPE reference indicating more specifically the type of installation tree the distro uses (e.g. RHEL_5 or Fedora_10), 
    * Note also that if you're managing the distro from Spacewalk, the fact of the existence of two distros in Cobbler will be transparent to you.  If you happen to select Xen vertualization, the Xen version gets used, else the other. 
    * [ add specific rpc calls ]
 * What happens when you create a Profile in the GUI, outline creation in spacewalk DB and XMLRPC calls into cobbler
 * When you create a profile in the Spacewalk UI, the following are stored to the Spacewalk and Cobbler data stores (* denotes "stored in Oracle, not visible on profile details screen", ** denotes "stored in Cobbler via UID association")
            * An RHNKSDATA record is created that records the following facts:
                * The kickstart type (wizard, unless you upload your own ks file - see below)
                * The spacewalk organization ID *
                * The profile's label text
                * Any comments associtated with the profile
                * Whether or not the profile is active
                * Whether or not the kickstart process should write output of custom post scripts to /root/ks-post.log
                * Whether or not the kickstart process should write output of pre- scripts to /root/ks-pre.log
                * Whether or not the kickstart process should write ks.cfg and all %include fragments to /root/
                * The Cobbler UID for the profile
                * Any additional arguments you might wish to pass to the anaconda (kickstart) kernel
                * Any additional arguments you might wish to pass to the installed kernel
                * Whether or not this profile should be considereed the default one for the organization
        * XMLRPC
 * When and why we create cobbler system records.
 * What happens when the user creates cobbler objects and when they show up in Spacewalk, and where these operations are limited
 * taskomatic's job in syncing changes from spacewalk to cobbler
 * taskomatic's job in syncing changes from cobbler to cobbler

== Cobbler Tips And Tricks ==

 * Cobbler editing of fields in Spacewalk through the cobbler command line
     * see "man cobbler" for more information.
 * PXE features in more depth
   * PXE boot loop prevention and all about BIOS order
      * If your machines are set up to PXE ahead of the local disks in BIOS order, pxe_just_once /must/ be set in /etc/cobbler/settings to avoid install loops.
      * Any custom kickstart templates must reference $kickstart_done in %post to make use of this feature.
 * Virt features in more depth
 * cobbler power management (integration in a future release?)
 * cobbler dhcp/dns management
 * cobbler replicate and it's use in Spacewalk context
 * other cobbler features you might find interesting


