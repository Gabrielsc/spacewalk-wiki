=== List Tag ===

There have been several list tag implementations throughout the history of the project.  The original perl list tag, an older Java list tag, and the new Java list tag.  When writing new pages, or updating existing pages, we use the new Java list tag.  It has the most features (including filters, pagination, page size selector, csv support), and is the easiest to use.




=== Using the new list tag ===

Like any struts page, it consists of 

 a) An action[[BR]]
 b) A jsp

The action may be responsible for retrieving/manipulating data and attaching data to the request and the jsp is responsible for formatting and displaying the data.  Both require specific things related to this list tag.  


It's been a common trend in Spacewalk code to use Data Transfer Objects (DTO) to hold the data that gets rendered by the new List Tag. The New List Tag can readily use any DTO or beanified object/value holders. Infact one of the primary motivations of the new List Tag was to make it favorably work with both Hibernate objects and DTO objects. However objects that are used in List which have checkbox in them need to implement the com.redhat.rhn.frontend.struts.Selectable interface. This is because the list tag needs to hold the checkbox selections somewhere and the DTO passed to the view was deemed as the best place to do it.


== Action side ==

==== Simplest case ====

For a very simple list with non-selectable objects all you need is this:

{{{
#!java
public class SystemGroupListSetupAction extends RhnAction {
    public ActionForward execute(ActionMapping mapping,
            ActionForm formIn,
            HttpServletRequest request,
            HttpServletResponse response) {

        RequestContext requestContext = new RequestContext(request);
        User user =  requestContext.getLoggedInUser();

        DataResult result = SystemManager.groupList(user, null);        
        request.setAttribute(ListTagHelper.PARENT_URL, request.getRequestURI());
        request.setAttribute("pageList", result);
        TagHelper.bindElaboratorTo("groupList", result.getElaborator(), request);


        return mapping.findForward("default");
    }
}
}}}

"result" is the actual list of objects we want to display.  We associate this to the request, along with the parent url and bind the list's elaborator to the request.  The elaborator is used to reduce the amount of information that is queried initially.  So for example, on the Systems list we only need the System Name initially.  You can decide what systems will appear on the page with only that one piece of info.  Then after the list is trimmed down to only what is displayed (The 20 out of 100 for example), we then elaborate the ones that will be displayed.  The elaboration is simply another query that gets run populating extra information.  

==== sets ====
If you would like to add sets to the mix, it takes a bit more code.  Have a set associated with a list allows the user to perform some action on a selected group of items from the list.  


{{{
#!java
        RhnSet set =  getSetDecl().get(user);
        if (!requestContext.isSubmitted()) {
            set.clear();
            RhnSetManager.store(set);
        }
}}}

This gets the set and if we are just arriving to the page we clear it.  Generally you want to clear a list if we are just arriving to it.  If the user navigates away from a page and then back, generally we expect that they are starting the current operation from scratch.  One exception to this is the System List page, it is never cleared.


If you are using the alpha bar (see below) then you will need to use this: 
{{{
        String alphaBarPressed = request.getParameter(
                AlphaBarHelper.makeAlphaKey(TagHelper.generateUniqueName(listName)));
        if (!requestContext.isSubmitted() && alphaBarPressed == null) {
            set.clear();
            RhnSetManager.store(set);
        }
}}}
This is because the alpha bar does not submit the page.  So if you have something selected you don't want to clear the set when they click on the alpha bar.
        


{{{
#!java
       RhnListSetHelper helper = new RhnListSetHelper(request);
        if (ListTagHelper.getListAction("groupList", request) != null) {
            helper.execute(set, "groupList", result);
        }
}}}
We check and see if a list action (select all, unselect all, etc) has been performed and if it has, we execute that command.


{{{
#!java
        if (!set.isEmpty()) {
            helper.syncSelections(set, result);
            ListTagHelper.setSelectedAmount("result", set.size(), request);            
        }
}}}
If the set is not empty, we sync the set with the objects in the list.  That the jsp knows if they are selected or not and can put a check in the checkbox.  We also set the amount so we can display "# Selected" in the top right.


{{{
#!java
    protected RhnSetDecl getSetDecl() {
        return RhnSetDecl.SYSTEM_GROUPS;
    }
}}}
Here we are just providing an easy generic way to get the name of the set we are using.


Here is the complete example:


{{{
#!java
public class SystemGroupListSetupAction extends RhnAction {
    public ActionForward execute(ActionMapping mapping,
            ActionForm formIn,
            HttpServletRequest request,
            HttpServletResponse response) {

        RequestContext requestContext = new RequestContext(request);
        User user =  requestContext.getLoggedInUser();


        DataResult result = SystemManager.groupList(user, null);        
        request.setAttribute(ListTagHelper.PARENT_URL, request.getRequestURI());
        request.setAttribute("pageList", result);
        ListTagHelper.bindSetDeclTo("groupList", getSetDecl(), request);
        TagHelper.bindElaboratorTo("groupList", result.getElaborator(), request);
        
        RhnSet set =  getSetDecl().get(user);
        if (!requestContext.isSubmitted()) {
            set.clear();
            RhnSetManager.store(set);
        }
        
        RhnListSetHelper helper = new RhnListSetHelper(request);
        if (ListTagHelper.getListAction("groupList", request) != null) {
            helper.execute(set, "groupList", result);
        }
        if (!set.isEmpty()) {
            helper.syncSelections(set, result);
            ListTagHelper.setSelectedAmount("result", set.size(), request);            
        }
       
        return mapping.findForward("default");
    }
    
    protected RhnSetDecl getSetDecl() {
        return RhnSetDecl.SYSTEM_GROUPS;
    }
}
}}}





== jsp side ==
Here is an example of a complete jsp showing a very simple list with only one column (name):
{{{
#!text/html
<%@ taglib uri="http://rhn.redhat.com/rhn" prefix="rhn" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://jakarta.apache.org/struts/tags-html" prefix="html" %>
<%@ taglib uri="http://jakarta.apache.org/struts/tags-bean" prefix="bean" %>
<%@ taglib uri="http://rhn.redhat.com/tags/list" prefix="rl" %>

<html:xhtml/>
<html>
<head>
    <meta name="page-decorator" content="none" />
</head>
<body>

<html:messages id="message" message="true">
    <rhn:messages><c:out escapeXml="false" value="${message}" /></rhn:messages>
</html:messages>

<rhn:toolbar base="h1" img="/img/rhn-icon-system_group.gif" imgAlt="system.common.groupAlt"
 helpUrl="/rhn/help/reference/en/s2-sm-system-group-list.jsp"
 creationUrl="/network/systems/groups/create.pxt" 
 creationType="group"
 creationAcl="user_role(system_group_admin)">
  <bean:message key="grouplist.jsp.header"/>
</rhn:toolbar>

<rl:listset name="groupSet" legend="system-group">

<rl:list dataset="pageList"
		name="groupList"
		emptykey="assignedgroups.jsp.nogroups">
        
		<rl:decorator name="ElaborationDecorator"/>

  	   <!--Name Column -->
		<rl:column sortable="true" 
				   bound="false"
		           headerkey="grouplist.jsp.name" 
		           sortattr="name">
			<c:out value="<a href=\"/network/systems/groups/details.pxt?sgid=${current.id}\">${current.name}</a>" escapeXml="false" />
		</rl:column>	
		
</rl:list>
</rl:listset>

</body>
</html>
}}}




== filters == 
Every List in the new List Tag can have a filter. Here is how you declare what filter you are using...
{{{
#!text/html
	<rl:list dataset="pageList"
                      name="files"
                     filter="com.redhat.rhn.frontend.action.configuration.sdc.ViewModifyPathsFilter">
}}}

For each list you want to have a filter, you must implement your own filter class, ViewModifyPathsFilter in this example.  To do that simply implement com.redhat.rhn.frontend.taglibs.list.BaseListFilter and implement your own proccessMap() method.  Here is an example:


{{{
#!java
    public void processMap(Map map, Locale userLocale) {
        LocalizationService ls = 
            LocalizationService.getInstance();
        String label = ls.getMessage("sdc.config.file_list.name",
                userLocale);
        map.put(label, "path");
}
}}}

Here "sdc.config.file_list.name" is the label for the field that is being filtered upon.  We are inserting the name of the field within the dto that we are filtering on.  So here, the filter would call getPath() on each object in the page list and filter upon that.

Another good exmaple is UserListFilter.java.


== alpha bar ==
To add the alpha bar simply add

alphabarcolumn="description" to the rl:list tag.  See here for an example:
{{{ 
#!text/html
<rl:listset name="keySet"> 
    
   <rl:list dataset="pageList"
         width="100%"
         name="keysList"
         styleclass="list"
         emptykey="activelist.jsp.noUsers"
         alphabarcolumn="description">
         
       <COLUMNS.....>
        
      </rl:list>
</rl:listset>
}}}

== csv export ==
To add CSV support to a page add the below tag to the jsp.
{{{
#!text/html
<rl:csv dataset="pageList"
    name="userList" 
    exportColumns="userLogin,userLastName,userFirstName,roleNames,lastLoggedIn"/>
}}}
"pageList" is the name of the 'List'

"userList" should match the name given to the <rl:list> this works with. This allows the CSV tag to reuse an Elaborator if it was stored with the associated <rl:list>.

exportColumns is a comma separated string of attributes you want to export.


Note: The CSV is handled by it's own Action, CSVDownloadAction, all data is passed to it in Session context. 


== page size widget == 
To add a page Size widge (that can now be seen on the rhn/systems/SystemList.do page, simply use the PageSizeDecorator:
{{{
#!text/html
<rl:decorator name="PageSizeDecorator"/>
}}}
Feel free to look in system_listdisplay.jspf for an example of usage. 