=== List Tag ===

There have been several list tag implementations throughout the history of the project.  The original perl list tag, an older Java list tag, and the new Java list tag.  When writing new pages, or updating existing pages, we use the new Java list tag.  It has the most features (including filters, pagination, page size selector, csv support), and is the easiest to use.


=== Using the new list tag ===

Like any struts page, it consists of 

a) An action
b) A jsp

The action may be responsible for retrieving/manipulating data and attaching data to the request and the jsp is responsible for formatting and displaying the data.  Both require specific things related to this list tag.  

== Action side ==


== jsp side ==



== filters == 
Every List in the new List Tag can have a filter. Here is how you declare what filter you are using...
{{{
	<rl:list dataset="pageList"
                      name="files"
                     filter="com.redhat.rhn.frontend.action.configuration.sdc.ViewModifyPathsFilter">
}}}

For each list you want to have a filter, you must implement your own filter class, ViewModifyPathsFilter in this example.  To do that simply implement com.redhat.rhn.frontend.taglibs.list.ListFilter and implement your own proccessMap() method.  Here is an example:


{{{
    public void processMap(Map map, Locale userLocale) {
        LocalizationService ls = 
            LocalizationService.getInstance();
        String label = ls.getMessage("sdc.config.file_list.name",
                userLocale);
        map.put(label, "path");
}
}}}

Here "sdc.config.file_list.name" is the label for the field that is being filtered upon.  We are inserting the name of the field within the dto that we are filtering on.  So here, the filter would call getPath() on each object in the page list and filter upon that.

Another good exmaple is UserListFilter.java.


== alpha bar ==
To add the alpha bar simply add

alphabarcolumn="description" to the rl:list tag.  See here for an example:
{{{ 
<rl:listset name="keySet"> 
    
   <rl:list dataset="pageList"
         width="100%"
         name="keysList"
         styleclass="list"
         emptykey="activelist.jsp.noUsers"
         alphabarcolumn="description">
         
       <COLUMNS.....>
        
      </rl:list>
</rl:listset>
}}}

== csv export ==
To add CSV support to a page add the below tag to the jsp.
{{{
<rl:csv dataset="pageList"
    name="userList" 
    exportColumns="userLogin,userLastName,userFirstName,roleNames,lastLoggedIn"/>
}}}
"pageList" is the name of the 'List'

"userList" should match the name given to the <rl:list> this works with. This allows the CSV tag to reuse an Elaborator if it was stored with the associated <rl:list>.

exportColumns is a comma separated string of attributes you want to export.


Note: The CSV is handled by it's own Action, CSVDownloadAction, all data is passed to it in Session context. 


== page size widget == 
To add a page Size widge (that can now be seen on the rhn/systems/SystemList.do page, simply use the PageSizeDecorator:
{{{
<rl:decorator name="PageSizeDecorator"/>
}}}
Feel free to look in system_listdisplay.jspf for an example of usage. 