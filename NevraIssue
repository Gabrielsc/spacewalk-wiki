== The Problems ==

Currently in spacewalk only one package on the spacewalk server can be pushed to a single org.  So for example rootfiles-8.1-1.1.1.noarch is shipped with RHEL 5, CentOS 5, and Fedora 9.  All 3 have different GPG signatures and thus different md5sums.   We need a way to differentiate content from different sources that is basically the same.

Also, CentOS rebuilds and resigns their packages across arches.  So even within CentOS there may be two foo-1.0.i386 packages with the same GPG key but with different md5sums.

So with all these issues we really have two problems:

1. Distinguishing between two packages such that distribution to a client is possible.

2. Easily manage packages from different sources and be able to differentiate between where packages originated.  (Which i think is VERY important). 

Originally we were trying to lump the issues together under one problem with one solution.




== Possible Solutions ==


1. Solution to issue #1.
 Use the md5sum of a package as a differentiation.  If to packages have different md5sums, they are considered two different packages.

Things that will need to be changed:  
 * DB
  * Unique constraint on md5sum,org for the rhnPackage table.
  * Enforce NVREA uniqueness within a channel
 * rhnpush 
  * Will need to be modified to push package to a new files system location (see below)
  * add support such that if a package has to be repushed on the file system, its path in the DB will be updated
 * Satellite-sync 
  * add support to push package to new file system location (see below)
  * add support such that if a package has to be redownloaded/replaced on the file system, its path in the DB will be updated (in case /var/satellite was blown away).
 * New file system location: (/var/satellite/)/redhat/ORG/N/V-R-E/A/MD5SUM/file.rpm
  * Any existing package will not be moved, the db will be referenced by their old location
  * If a package has to be redownloaded/placed on the file system, it will be put in the new location and it's path within the DB will be updated (see rhnpush, satellite-sync above)
  * We could script a way for upgrade such that we move packages to the new file location and update the db, but that seems more hackish to me than just leaving existing packages where they are.  We can discuss this more...


2. Solution to issue #2
  Whenever importing a package, store its GPG key id within the db in the rhnPackage table.  The user can then associate GPG keys to providers.  The idea here is that we are tracking package sources based on something relevant to the package (and something the user doesn't have to input).  
  

Things that will need to be changed:

 * DB
  * rhnPackage table will have new field rhnPackage.gpgId referencing rhnPackageGpgId
  * Table will be added rhnPackageGpgId which will have id, gpgId, modified, created
  * Table will be added rhnPackageProvider with an id, name, modified time, created time.  And will be pre-populated with equivalent labels/names:
   * Red Hat Inc.
   * Fedora
   * CentOS
   * OpenSuse
   * Novell
   * Scientific Linux
   * Oracle
  * Table will be added rhnPackageGpgProvider, linking rhnPackageProvider and rhnPackageGpgId with columns gpgId.id, provider.id...

 * rhnpush 
  * will need to grab the gpg id from the rpm and push it to the DB
 * satellite-sync
  * will need to grab the gpg id from the rpm and push it to the DB
 * exporter (optional)
  * export the gpg information such that it can be imported without having to be pulled from the rpm
 * webUi
  * Add provider/gpg information to certain package lists
  * Provide a way to link providers to gpg keys (optional)


Notes:
 * Apparently up2date handles multiple packages with the same NVREA within the same channel tree fine.  That surprised us both.  (So now we really only have to restrict a single NVREA to a channel.  


Questions
 * Should we offer a way to add package providers easily? (immediate term or longer term)?