
[[TOC]]

= Spacewalk with PostgreSQL backend =

Historically, RHN Satellite and thus Spacewalk servers required Oracle RDBMS as database backend. In an attempt to make the whole Spacewalk project use open source software, we'd like to add support for PostgreSQL as database backend. For Spacewalk 0.6, quite a lot of work went into Spacewalk schema changes to make the schema PostgreSQL compatible. Unfortunately, little effort was made to make those changes and the whole PostgreSQL support sustainable.

This is a page describing the status of the PostgreSQL support as of 12th October 2010, the nightly composes.

== Yum configuration ==

Please use the Spacewalk nightly repos as described at [wiki:HowToInstall#Nightlybuilds].

== Get the PostgreSQL server running ==

Follow [wiki:PostgreSQLServerSetup].

== Install the spacewalk-postgresql and configure it ==

When installing Spacewalk, you install {{{spacewalk-postgresql}}} which should give you correct backend and dependencies.
{{{
# yum install spacewalk-postgresql
}}}

Then, when you run {{{spacewalk-setup}}}, you'll be asked for connection information:

{{{
# spacewalk-setup --disconnected
** Database: Setting up database connection for PostgreSQL backend.
Hostname (leave empty for local)? 
Database? spaceschema
Username? spaceuser
Password? 
** Database: Populating database.
}}}

== Database schema ==

When Spacewalk is installed and {{{spacewalk-setup}}} run for the first time, database is populated with necessary database objects via {{{psql}}} from {{{/etc/sysconfig/rhn/postgres/main.sql}}}. So this is the file you want to edit if you need to fix something in the schema on your installation. Then rerun {{{spacewalk-setup}}}, it will prompt to clear the schema. Watch {{{/var/log/rhn/populate_db.log}}} for any errors during population of the schema in the PostgreSQL database.

Of course, to preserve the changes, you need to get them to the Spacewalk git repo, so that they get to the next nightly spacewalk-schema package. For PostgreSQL, the schema is compiled from files in the {{{schema/spacewalk/common/}}} and {{{schema/spacewalk/postgres/}}} directories in the Spacewalk git repo. A file should be either in the {{{common/}}} or in {{{postgres/}}} subdirectory, not in both.

=== TODO ===

 * Not all Oracle sources have their PostgreSQL counterparts.
   * Run {{{perl schema-source-sanity-check.pl -I}}} to see what needs to be worked on.
 * Even those that have them most probably have gone out of sync since the time the PostgreSQL files were crafted back in Spacewalk 0.6 timeframe. Especially those that don't start with the {{{-- oracle equivalent source sha1 ...}}} line.
   * Run {{{perl schema-source-sanity-check.pl -I}}} to see what needs to be worked on.
 * I would like us to check upon rpm build time that every file contains just what its filename says it should contain -- triggers in its own files, table files with just table and index DDL, etc.
 * The {{{chameleon}}} tool is used to generate DDL from {{{common/}}} but it only seems to work for tables. Do we want to extend that tool, or drop it completely?

== Database schema upgrades ==

We ignore the issue for now. Will revisit when we have at least something solid to work with.

== Python and Perl stack ==

They mostly run direct SQL queries and commands against the database schema. I just fixed those I encountered during {{{spacewalk-setup}}}. In general, it should be possible to fix any queries to be fine both for Oracle and PostgreSQL.

With PL/SQL code the things are a bit more tricky because PostgreSQL does not support anonymous PL/pgSQL blocks. Please check [http://git.fedorahosted.org/git/?p=spacewalk.git;a=commitdiff;h=30903ca16fa55cab6994dbd97595eb549bd3f619 commit "Add initial support for anonymous PL/pgSQL blocks"] to see what markup ({{{/*pg_cs*/}}} and {{{/*pg ...*/}}}) can be used in Python code to amend the PL/SQL code to also run as PL/pgSQL. You then want to run {{{rhnSQL.prepare}}} with new parameter {{{params}}} which should have the types of the new function which gets created.

For Perl, I assume we will do the same once we hit the first case when it's needed.

Of course, we might as well just rewrite all these anonymous PL/SQL snippets to PL/SQL procedures and just call those. But that would mean that we'd need to keep and maintain two sources. But that might not prove to be that hard, especially if we have some sort of sanity checking (see above). Opinions welcome.

=== TODO ===

 * The types are not used at all.
 * Do the same for Perl stack once needed.
 * The function creation could probably be done by some PL/pgSQL function, so that we don't duplicate the code between Python and Perl.

=== TODO ===

 * Address any issues after that.

== Oracle dependencies ==

The Oracle bits are no longer needed to install Spacewalk with PostgreSQL backend.

== Spacewalk installed and running, go hack ==

You should be able to get WebUI running with Spacewalk nightly repo, and create the first user, and log in.

You will see some error popups, but you will at least have something to click at and work with.

== Migration ==

On the page [wiki:PostgreSQLMigration] we are going to collect all known problems and solutions handy for porting to PostgreSQL.
