
[[TOC]]

= Spacewalk with PostgreSQL backend =

Historically, RHN Satellite and thus Spacewalk servers required Oracle RDBMS as database backend. In an attempt to make the whole Spacewalk project use open source software, we'd like to add support for PostgreSQL as database backend. For Spacewalk 0.6, quite a lot of work went into Spacewalk schema changes to make the schema PostgreSQL compatible. Unfortunately, little effort was made to make those changes and the whole PostgreSQL support sustainable.

This is a page describing the status of the PostgreSQL support as of 12st August 2010, the nightly composes.

== Oracle dependencies ==
Please note that you still need to download and install the below Oracle distributed RPMs. These packages are used for the monitoring functionality in Spacewalk, where you may monitor an Oracle database using monitoring probes.
{{{
oracle-instantclient-basic-10.2.0.4-1
oracle-instantclient-sqlplus-10.2.0.4-1
}}}
For more information on how to install these dependencies please visit the [OracleXeSetup Oracle 10g Express Edition Setup].

== Yum configuration ==
Below is different yum configurations to use.

=== For RHEL 5 ===
The setup as decribed below will work on RHEL 5
{{{
cat > /etc/yum.repos.d/spacewalk.repo << 'EOF'
[spacewalk]
name=Spacewalk
# RHEL 5
baseurl=http://koji.spacewalkproject.org/spacewalk/split/spacewalk-5E/server/spacewalk-5E-1.2/$basearch/os
gpgkey=http://spacewalk.redhat.com/yum/RPM-GPG-KEY-spacewalk
enabled=1
gpgcheck=0
EOF
}}}

=== For Fedora 12 ===
The setup as decribed below will work on Fedora 12
{{{
cat > /etc/yum.repos.d/spacewalk.repo << 'EOF'
[spacewalk]
name=Spacewalk
# Fedora 12
baseurl=http://koji.spacewalkproject.org/spacewalk/split/spacewalk-f12/server/spacewalk-f12-1.2/$basearch/os
gpgkey=http://spacewalk.redhat.com/yum/RPM-GPG-KEY-spacewalk
enabled=1
gpgcheck=0
EOF
}}}

=== For Fedora 13 ===
The setup as decribed below will work on Fedora 13
{{{
cat > /etc/yum.repos.d/spacewalk.repo << 'EOF'
[spacewalk]
name=Spacewalk
# Fedora 13
baseurl=http://koji.spacewalkproject.org/spacewalk/split/spacewalk-f13/server/spacewalk-f13-1.2/$basearch/os/
gpgkey=http://spacewalk.redhat.com/yum/RPM-GPG-KEY-spacewalk
enabled=1
gpgcheck=0
EOF
}}}

== Get the PostgreSQL server running ==

Follow [wiki:PostgreSQLServerSetup].

== Install the spacewalk-postgresql and configure it ==

When installing Spacewalk, you install {{{spacewalk-postgresql}}} which should give you correct backend and dependencies.
{{{
# yum install spacewalk-postgresql
}}}

Then, when you run {{{spacewalk-setup}}}, you'll be asked for connection information:

{{{
# spacewalk-setup --disconnected
** Database: Setting up database connection for PostgreSQL backend.
Hostname (leave empty for local)? 
Database? spaceschema
Username? spaceuser
Password? 
** Database: Populating database.
}}}

=== TODO ===

 * ~~We should Require {{{postgresql}}} in {{{spacewalk-postgresql}}} to get {{{psql}}} installed even if the PostgreSQL server is on another box. This setup needs to be verified anyway -- I only tried local setup.~~ Resolved in spacewalk-postgresql-1.1.6-1.

== Database schema ==

When Spacewalk is installed and {{{spacewalk-setup}}} run for the first time, database is populated with necessary database objects via {{{psql}}} from {{{/etc/sysconfig/rhn/postgres/main.sql}}}. So this is the file you want to edit if you need to fix something in the schema on your installation. Then rerun {{{spacewalk-setup}}}, it will prompt to clear the schema. Watch {{{/var/log/rhn/populate_db.log}}} for any errors during population of the schema in the PostgreSQL database.

Of course, to preserve the changes, you need to get them to the Spacewalk git repo, so that they get to the next nightly spacewalk-schema package. For PostgreSQL, the schema is compiled from files in the {{{schema/spacewalk/common/}}} and {{{schema/spacewalk/postgres/}}} directories in the Spacewalk git repo. A file should be either in the {{{common/}}} or in {{{postgres/}}} subdirectory, not in both. Also note that {{{postgres/manual/}}} is probably not needed -- I was tempted to remove it completely but I left it for now, in case people thought there were some pearls of wisdom there. But it will be gone in a week or so unless you stop me.

=== TODO ===

 * We desperately need some mechanism which would keep the PostgreSQL variant of the schema definitions in our git repo in sync with the Oracle schema.
   * One thing is to make sure all objects have their equivalents (or at least the equivalent {{{.sql}}} file which would say something like "in this db backend, this is not needed").
   * Another thing is to make sure that we know when Oracle schema file (which is where the primary changes will be done for months to come anyway) changes and PostgreSQL version needs to be verified. I was thinking about putting SHA1 of the Oracle file to the first line of every PostgreSQL file and then in {{{spacewalk-schema}}} build time check that if Oracle file has changed, that it was reflected in the PostgreSQL file.
     * The issue with this approach might be that currently the schemas are out of sync -- PostgreSQL variants were not updated in ages. So we might want to do this based on Oracle status at the time the PostgreSQL files were crafted, back in Spacewalk 0.6 timeframe.
   * I would like us to check upon rpm build time that every file contains just what its filename says it should contain -- triggers in its own files, table files with just table and index DDL, etc.
 * The {{{chameleon}}} tool is used to generate DDL from {{{common/}}} but it only seems to work for tables. Do we want to extend that tool, or drop it completely?

== Database schema upgrades ==

We ignore the issue for now. Will revisit when we have at least something solid to work with.

== Python and Perl stack ==

They mostly run direct SQL queries and commands against the database schema. I just fixed those I encountered during {{{spacewalk-setup}}}. In general, it should be possible to fix any queries to be fine both for Oracle and PostgreSQL.

With PL/SQL code the things are a bit more tricky because PostgreSQL does not support anonymous PL/pgSQL blocks. Please check [http://git.fedorahosted.org/git/?p=spacewalk.git;a=commitdiff;h=30903ca16fa55cab6994dbd97595eb549bd3f619 commit "Add initial support for anonymous PL/pgSQL blocks"] to see what markup ({{{/*pg_cs*/}}} and {{{/*pg ...*/}}}) can be used in Python code to amend the PL/SQL code to also run as PL/pgSQL. You then want to run {{{rhnSQL.prepare}}} with new parameter {{{params}}} which should have the types of the new function which gets created.

For Perl, I assume we will do the same once we hit the first case when it's needed.

Of course, we might as well just rewrite all these anonymous PL/SQL snippets to PL/SQL procedures and just call those. But that would mean that we'd need to keep and maintain two sources. But that might not prove to be that hard, especially if we have some sort of sanity checking (see above). Opinions welcome.

=== TODO ===

 * The types are not used at all.
 * ~~ We should check if the function already exists and not create it again.~~ Fixed in spacewalk-backend-1.2.2-1.
 * Do the same for Perl stack once needed.
 * The function creation could probably be done by some PL/pgSQL function, so that we don't duplicate the code between Python and Perl.

== Java stack ==

Queries should be the same story as with Pyrhon and Perl -- rewrite them with some reasonable SQL syntax to make both Oracle and PostgreSQL happy.

For PL/SQL, use [http://git.fedorahosted.org/git/?p=spacewalk.git;a=commitdiff;h=73a318ccd254d4abd16ee40f2913dc183f652f8e the { call ... } syntax] -- it seems to do the trick.

For Hibernate, it should just work.

The [wiki:PostgreSQL/Blobs blob issue] was resolved with spacewalk-java-1.1.33.

=== TODO ===

 * ~~Fix the [wiki:PostgreSQL/Blobs] issue.~~
 * Address any issues after that.

== Spacewalk installed and running, go hack ==

You should be able to get WebUI running with Spacewalk nightly repo, and create the first user, and log in.

You will see some error popups, but you will at least have something to click at and work with.