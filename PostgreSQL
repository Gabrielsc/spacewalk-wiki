
= Spacewalk with PostgreSQL backend =

Historically, RHN Satellite and thus Spacewalk servers required Oracle RDBMS as database backend. In an attempt to make the whole Spacewalk project use open source software, we'd like to add support for PostgreSQL as database backend. For Spacewalk 0.6, quite a lot of work went into Spacewalk schema changes to make the schema PostgreSQL compatible. Unfortunately, little effort was made to make those changes and the whole PostgreSQL support sustainable.

This is a page describing the status of the PostgreSQL support as of July 2010, before Spacewalk 1.1 release.

== Parts of the problem (and solution) ==

=== What bits to use ===

The setup as decribed below will only work on Fedora 12 for now, with nightly repo. RHEL 5 has PostgreSQL which is too old, and Fedora 13 nightly repo is not complete yet.

{{{
cat > /etc/yum.repos.d/spacewalk.repo << 'EOF'
[spacewalk]
name=Spacewalk
# Fedora 12
baseurl=http://koji.spacewalkproject.org/spacewalk/split/spacewalk-f12/server/spacewalk-f12-1.1/$basearch/os
gpgkey=http://spacewalk.redhat.com/yum/RPM-GPG-KEY-spacewalk
enabled=1
gpgcheck=0
EOF
}}}

=== Get the PostgreSQL server running ===

Follow [wiki:PostgreSQLServerSetup].

=== Install the spacewalk-postgresql and configure it ===

When installing Spacewalk, you install either {{{spacewalk-oracle}}} or {{{spacewalk-postgresql}}} which should give you correct backend and dependencies. To use PostgreSQL backend, install {{{spacewalk-postgresql}}}.

Then, when you run {{{spacewalk-setup}}}, you'll be asked for connection information:

{{{
# spacewalk-setup --disconnected
** Database: Setting up database connection for PostgreSQL backend.
Hostname (leave empty for local)? 
Database? spaceschema
Username? spaceuser
Password? 
** Database: Populating database.
}}}

==== TODO ====

We should Require {{{postgresql}}} in {{{spacewalk-postgresql}}} to get {{{psql}}} installed even if the PostgreSQL server is on another box. This setup needs to be verified anyway -- I only tried local setup.

=== Database schema ===

When Spacewalk is installed and {{{spacewalk-setup}}} run for the first time, database is populated with necessary database objects via {{{psql}}} from {{{/etc/sysconfig/rhn/postgres/main.sql}}}. So this is the file you want to edit if you need to fix something in the schema on your installation. Then rerun {{{spacewalk-setup}}}, it will prompt to clear the schema. Watch {{{/var/log/rhn/populate_db.log}}} for any errors during population of the schema in the PostgreSQL database.

Of course, to preserve the changes, you need to get them to the Spacewalk git repo, so that they get to the next nightly spacewalk-schema package. For PostgreSQL, the schema is compiled from files in the {{{schema/spacewalk/common/}}} and {{{schema/spacewalk/postgres/}}} directories in the Spacewalk git repo. A file should be either in the {{{common/}}} or in {{{postgres/}}} subdirectory, not in both. Also note that {{{postgres/manual/}}} is probably not needed -- I was tempted to remove it completely but I left it for now, in case people thought there were some pearls of wisdom there. But it will be gone in a week or so unless you stop me.

=== Python and Perl stack ===

They mostly run direct SQL queries and commands against the database schema. I just fixed those I encountered during {{{spacewalk-setup}}}. In general, it should be possible to fix any queries to be fine both for Oracle and PostgreSQL.

With PL/SQL code the things are a bit more tricky because PostgreSQL does not support anonymous PL/pgSQL blocks. Please check [http://git.fedorahosted.org/git/?p=spacewalk.git;a=commitdiff;h=30903ca16fa55cab6994dbd97595eb549bd3f619 commit "Add initial support for anonymous PL/pgSQL blocks"] to see what markup ({{{/*pg_cs*/}}} and {{{/*pg ...*/}}}) can be used in Python code to amend the PL/SQL code to also run as PL/pgSQL. You then want to run {{{rhnSQL.prepare}}} with new parameter {{{params}}} which should have the types of the new function which gets created.

For Perl, I assume we will do the same once we hit the first case when it's needed.

==== TODO ====

 * The types are not used at all.
 * We should check if the function already exists and not create it again.
 * Do the same for Perl stack once needed.
 * The function creation could probably be done by some PL/pgSQL function, so that we don't duplicate the code between Python and Perl.