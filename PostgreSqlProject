= PostgreSQL Project =

== Overview ==

This project is focused on modifying Spacewalk to support both Oracle and PostgreSQL databases.

The minimum supported version of Oracle is Oracle 10g.

=== Communication ===

 * Developer list: spacewalk-devel@redhat.com [https://www.redhat.com/mailman/listinfo/spacewalk-devel (signup)]
 * IRC: #spacewalk-devel on [http://freenode.net/ (irc.freenode.net)]

=== Contacts ===

 * Todd Sanders mailto:tsanders@redhat.com
 * Jeff Ortel mailto:jortel@redhat.com
 * Devin Goodwin mailto:dgoodwin@redhat.com
 * Bruce Momjian mailto:bruce@momjian.us
 * Jim Mlodgenski mailto:jim@enterprisedb.com
 * George Williams mailto:george.williams@enterprisedb.com

=== Project Plan ===

This is s ''straw man'' for the project plan and needs more work.  After the team has completed, let's move to another page.

==== Planning - phase 1 ====

 * Knowledge Transfer
   * Overview (done 12/09/08)
      ''add detail here''
   * Datamodel Review
      ''add detail here''
 * Analysis
    ''add detail here''
    * Queries
       ''add detail here''
    * Procedures
       ''add detail here''
    * Schema
       ''add detail here''
 * Identify Risks
    ''add detail here''
 * Infrastructure
    ''add detail here''
   * Communication
      ''add detail here''
   * Source Control
      ''add detail here''
   * Packaging Plan
      ''add detail here''
   * Development Environment
      ''add detail here''
      * Sample (populated) Database (ora, pg)
         ''add detail here''
 * Technical (migration) Approach
    ''add detail here - we can link to Approach section below''
 * Assemble Team
    ''add detail here''
 * Test Plan
    ''add detail here''
    * Functional
       ''add detail here''
       * Query / Stored Procedure Level
          ''add detail here''
       * System Level
          ''add detail here''
    * Performance
       ''add detail here''
    * Test Environment
       ''add detail here''
    * Identify gaps in RH automated testing.
       ''add detail here''
 * Data Migration Plan
    ''add detail here''
    * Oracle -> Postgres
    ''add detail here''
    * Postgres -> Oracle ?
     ''add detail here''
 * Schema Upgrade Plan
    ''How do we do this for multiple databases''

==== Implementation - phase 2 ====

 * Setup git and development branch
    ''add detail here''
 * Create PG Schema & Sample Database
    ''add detail here''
 * Leverage available compatibility packages (orafce, ...)
    ''add detail here''
    * Back porting 
    ''add detail here''
    * Packaging ...
    ''add detail here''
 * Package development packages
    ''add detail here''
    * spacewalk-schema.rpm
    * spacewalk-setup.rpm
     ....
 * Modify spacewalk infrastructure to handle both databases
    ''add detail here''
    * drivers
    * installer
    * db wrappers 
       * java
       * python
       * perl
 * Refine/Tune PG schema
    ''add detail here''
 * Tagging Queries
    ''add detail here'
 * Isolate Development Branch from Master
    ''add detail here''
 * Update Queries to work in both Databases
    ''add detail here''
 * Create PG functions for Ora store procedures
    ''add detail here''

==== Testing - phase 3 ====

 * Functional Regression Test (RH automated testing)
    ''add detail here''
 * Query / Stored Procedure benchmarks
    ''add detail here''
 * Client ''driven'' performance Testing
    ''add detail here''

=== Approach ===

''' DDL '''

Data Definition Language (DDL) will require separate versions for Oracle and Postgres, e.g.
CREATE TABLE, CREATE FUNCTION, CREATE INDEX.  These statements are centralized and change rarely so it is easy to maintain two versions.  

Tables can be converted using ora2pg, then tuned to use the proper native Postgres data types, e.g. INTEGER, BOOLEAN.

Functions will need to be categorized as easy and hard and then worked on by people with the appropriate skill level.

''' Non-DDL '''

3k queries must be studied and perhaps modified.

Non-DDL queries must be managed differently.  Non-DDL queries will fall into four categories:
        1. work unchanged in both Oracle and Postgres
        2. can be rewritten to work on both databases, e.g. ANSI joins, CURRENT_TIMESTAMP
        3. (same) but requires db changes, e.g. add compatibility functions like decode() from Orafce 
        4. need to create a Postgres-specific version of the query

This analysis is going to require major effort so it is best to handle it in stages:

        1.  Mark all queries via SQL comments?  '-- PGPORT myfile.pl:535 ?'.  This gives each query a unique identifier so it can be referenced in later stages
        2.  Make wholesale changes to minimize incompatibility, like sysdate
        3.  Change all comment question marks to one of the four values listed above
        4.  Create a GIT branch
        5.  Rewrite # 2 queries to # 1
        6.  Add db changes and change # 3 queries to # 1
        7.  Develop and implement a system to allow for Postgres-specific versions of # 4 queries


''' Installation '''

Install Postgres as part of the Spacewalk install, and convert Oracle data to Postgres using ora2pg; moving from Postgres to Oracle is problematic.


''' Testing '''

Use 'log_min_error_statement' and 'log_min_duration_statement' to find Postgres queries that are causing errors or are slow.  Single queries and performance unit tests should be of similar speed on Oracle and Postgres.  The standard regression tests should pass.

Existing Java JUnit tests, API tests, and QA built web UI tests should give us substantial coverage to determine if things are working. Additional manual testing for client communication will probably be required.

=== Tracking ===

[PostgresIssues Project Issues]

[PostgresTasks Project Tasks]

=== Resources ===

Orafce: Oracle support functions http://pgfoundry.org/projects/orafce/

Ora2pg: Convert Oracle DDL to Postgres http://freshmeat.net/projects/ora2pg/

=== Porting Documentation ===

Porting Oracle Applications to PostgreSQL http://developer.postgresql.org/~petere/oraport.pdf

EnterpriseDB Oracle Compatibility Developer's Guide http://www.enterprisedb.com/downloads/docs/EnterpriseDB_OraCompat_8.3_v2.7.pdf

Migrating Oracle PL/SQL to PL/pgSQL http://www.pgadmin.org/docs/1.4/pg/plpgsql-porting.html

=== References ===
[PathToPostgreSql early research]