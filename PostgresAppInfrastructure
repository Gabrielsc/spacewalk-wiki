[wiki:PostgresTechnicalApproach Technical Approach Page]

This page describes the work needed to facilitate using both Oracle and {{{PostgreSQL}}} within the Spacewalk application.

=== Installation ===

 * Driver packaging
 * spacewalk-setup
 * db-control

=== Schema Management ===

 * /schema/spacewalk/rhnsat
    Contains DDL files.
 * /schema/spacewalk/rhnsat/common
    Common schema.
 * /schema/spacewalk/rhnsat/common/tables
    Although we have created ''static'' postgres table DDL (.sql) files, the long term goal is to have most of the table .sql files would go in this directory.  The ''common'' schema syntax would be a superset of both DDL grammars.  At build time, the ''common'' schema would be used to generate the ''dynamic'' DDL files for each DB in the DB specific directories.
 * /schema/spacewalk/rhnsat/common/views
    Although we have created ''static'' postgres view DDL (.sql) files, the long term goal is to have most of the view .sql files would go in this directory.  The ''common'' schema syntax would be a superset of both DDL grammars.  At build time, the ''common'' schema would be used to generate the ''dynamic'' DDL files for each DB in the DB specific directories.  In order for a view to be common, it must contain a query that works for all databases.
 * /schema/spacewalk/rhnsat/oracle
    Contains both: generated (dynamic) '''oracle''' specific schema and ''forked'' (static) schema files.
 * /schema/spacewalk/rhnsat/oracle/tables
    Contains both: generated (dynamic) '''oracle''' specific table & index schema files and ''forked'' (static) schema files.
 * /schema/spacewalk/rhnsat/oracle/views
    Contains both: generated (dynamic) '''oracle''' specific view schema files and ''forked'' (static) schema files.
 * /schema/spacewalk/rhnsat/oracle/triggers
    Contains only '''oracle''' specific ''forked'' trigger creation files.
 * /schema/spacewalk/rhnsat/oracle/procs
    Contains only '''oracle''' specific ''forked'' stored procedure creation files.
 * /schema/spacewalk/rhnsat/oracle/packages
    Contains only '''oracle''' specific ''forked'' package/package body creation files.
 * /schema/spacewalk/rhnsat/postgres
    Contains both: generated (dynamic) '''postgres''' specific schema and ''forked'' (static) schema files.
 * /schema/spacewalk/rhnsat/postgres/tables
    Contains both generated (dynamic) '''postgres''' specific table & index schema files and ''forked'' (static) schema files.
 * /schema/spacewalk/rhnsat/postgres/views
    Contains both: generated (dynamic) '''postgres''' specific view schema files and ''forked'' (static) schema files.
 * /schema/spacewalk/rhnsat/postgres/triggers
    Contains only '''postgres''' specific ''forked'' trigger creation files.
 * /schema/spacewalk/rhnsat/postgres/procs
    Contains only '''postgres''' specific ''forked'' stored procedure creation files.
 * /schema/spacewalk/rhnsat/postgres/packages
    Contains only '''postgres''' specific ''forked'' package/package body creation files.

=== Database Upgrade ===

Example directories for upgrade listed to demonstrate concepts.  Having common upgrade DDL that is used to generate
the DB specific upgrade DDL (like the table schema) may not be feasible but a worthy goal.  Any de duplication will be good.

 * /schema/spacewalk/upgrade/spacewalk_04-05
 * /schema/spacewalk/upgrade/spacewalk_04-05/common
 * /schema/spacewalk/upgrade/spacewalk_04-05/oracle
 * /schema/spacewalk/upgrade/spacewalk_04-05/postgres

=== Java Stack ===

 * Driver setup
    The ''/etc/rhn/rhn.conf'' file needs to have the proper driver specified (see spacewalk-setup).
 * Handling ''forked'' queries.
    Queries are already resolved by name in the Java stack.  So, the work to be done here is to provide for ''forked'' queries using a namespace prefix.  Common queries would retain the ''plain'' name as the do today.  ''Forked'' queries would have their name qualified by a prefixed matching the database ''type'' property defined in the ''/etc/rhn/rhn.conf'' file.  An oracle specific query named "listAllChannels" when forked would be qualified as: "oracle:listAllChannels" and "postgres:listAllChannels".  This qualification would be transparent to the caller.  The underlying query resolution mechanism would first try to resolve as a common query then try the DB specific prefix.  The hunting order can be reversed for performance if it turns out there are more forked queries then common (although this would be contrary to our goal).
    * Hibernate queries
    * Datasource queries

=== Python Stack ===

 * Driver setup
    The ''/etc/rhn/rhn.conf'' file needs to have the proper driver specified (see spacewalk-setup).
 * Handling ''forked'' queries.
    Queries are __not__ currently resolved by name in the Python stack.  So, the work to be done here is to add this capability into rhnSQL and provide for ''forked'' queries using a namespace prefix.  An approach could be to add a python ''package'' containing one or more python ''modules'' containing a dictionary of named queries.  ''Forked'' queries would have their name qualified by a prefixed matching the database ''type'' property defined in the ''/etc/rhn/rhn.conf'' file.  An oracle specific query named "listAllChannels" when forked would be qualified as: "oracle:listAllChannels" and "postgres:listAllChannels".  This qualification would be transparent to the caller.  The underlying query resolution mechanism would first try to resolve as a common query then try the DB specific prefix.  The hunting order can be reversed for performance if it turns out there are more forked queries then common (although this would be contrary to our goal).  Unlike the Java stack, __only__ the ''forked'' queries would be added to the dictionaries and the calling code modified to perform the lookup.

=== Perl Stack ===

 * Driver setup
    The ''/etc/rhn/rhn.conf'' file needs to have the proper driver specified (see spacewalk-setup).
 * Handling ''forked'' queries.
    Queries are already __mostly__ resolved by name in the Perl stack.  So, the work to be done here is to provide for ''forked'' queries using a namespace prefix.  Common queries would retain the ''plain'' name as the do today.  ''Forked'' queries would have their name qualified by a prefixed matching the database ''type'' property defined in the ''/etc/rhn/rhn.conf'' file.  An oracle specific query named "listAllChannels" when forked would be qualified as: "oracle:listAllChannels" and "postgres:listAllChannels".  This qualification would be transparent to the caller.  The underlying query resolution mechanism would first try to resolve as a common query then try the DB specific prefix.  The hunting order can be reversed for performance if it turns out there are more forked queries then common (although this would be contrary to our goal).  Queries embedded in the code will have to be moved to using the lookup mechanism.