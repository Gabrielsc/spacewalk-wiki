
== Python Backend Architecture: ==

If you examine the backend source code comprising all of RHN Satellite you will see it split up into 2 major areas:

'''Python client code:'''

          This is the set of client side libraries that run on the managed system. The client code periodically checks in with the server which sends instructions to the client to execute. Examples: rhn_check, rhn_register, yum-rhn-plugin, rhnmd.

'''Python Server backend code:'''

          This is the server side code that exposes an XMLRPC interface which the clients interact with. It encapsulates a good portion of RHN Satellite's business rules and validation. In order to service up this XMLRPC interface a hand coded python object mapping of RHN's database schema was developed.


{{{
                         SATELLITE SERVER BACKEND ARCHITECTURE 
                        ======================================
                                                _____________
    _________        ________________          | FILESYSTEM |----------|
   |         |      |    APACHE      |-------->|____________|          |
   | CLIENT  |----->|      +         |         ________          ______v_____
   |         |      |    SERVER      |         |       |         | SATELLITE |     CHANNEL
   |_________|      |    BACKEND     |-------->|  DB   |-------->| EXPORTER  |----> DUMPS
       ^            |      +         |         |_______|         |___________|
       | rhn-check  |    XMLRPC      |             ^  ^
       |            |    HANDLERS    |             |  |            ____________
       |            |________________|             |  |-----------| SAT-SYNC  |---> HOSTED
  __________                                   ____|__________    |___________|
 |  OSAD   |------------- jabber ------------->|  OSA        |
 |_________|                                   |DISPATCHER   |
                                               |_____________|

}}}

'''XMLRPC Handlers:'''

'''APP && PACKAGE-PUSH:'''

This handler provides capability for rhnpush client to push the package information and associate it with the db and the filesystem.

'''APPLET:'''

This handler provides calls for rhn-applet tool for polling package information.

'''CONFIG & CONFIG-MGMT:'''

These handlers are used by config management client to communicate with the server in managing config files and channels.

'''SAT:'''

This handler is mainly internal to the satellite itself and essentially used by satellite sync.

'''XMLRPC:'''

This handler is mainly responsible for providing capability for registation, scheduled actions, package updates and proxy functionality. Tools using this handler are registration client, up2date, rhn_check and proxy.

'''XP:'''

This is used for package information uploads and other additional capabilities can be added here


'''MORE DOCS COMING HERE''', Apart from the above I'm currently working on docs for examples, usage of xmlrpc api and other backend component details as additions to this page -- > Prad
