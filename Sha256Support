= SHA256 Support for Spacewalk =

== Goal ==
 * Fedora 11 Clients with sha256 supported content should be able to interact with spacewalk and proxy as expected
 * spacewalk server should be able to support newer rpm content in addition to old
 * proxy should be able to serve and accept newer rpm content.
 * webui should display the right checkSum based on the rpm
 * API calls should be be able to handle sha256 checksum both as input args and output results
 * Both proxy and spacewalk tools should handle shasum.
 * if possible move to shasum replacing md5 for other non-rpm verifications on spacewalk/proxy

== Tasks (in order) ==

|| Task || Estimated Hours || Assignee || Status || Notes ||
|| Database Changes  || 40 hours || mmraka/prad || || ||
|| spacewalk Server + Tools|| 60 hours || prad  || ||  ||
|| Proxy Server + Tools || 60 hours || msuchy  || || ||
|| Client tools  || 40 hours || jmatthews + prad || ||  ||
|| Web UI + API  || 40 hours || jmatthews  ||  || ||
|| Upgrades || 30 hours ||mmraka/prad ||  || ||


The order here represents the dependency chain. Database changes would be the first to get done so we have those to develop and test the app code changes. spacewalk and proxy  development can go in parallel, but these should be done(at least partly) for client work to start so we have supporting server code for clients. Web UI and upgrades can go last I guess. 

== Specifications ==  

Following are the possible areas we'll need to make to support sha256 content across board. I'm sure we'll find more as we move along, but these are the major areas we need to make sure works as expected with new sha256 supported rpms on f11.

=== Database(estimates: 30 hrs) ===

Checksum usage in spacewalk (Some of these might be one or the other, depending on rpm version, yum version etc):
 * rhnPackageFile 
 * rhnPackage
 * rhnKSTreeFile    
 * rhnPackageSource  
 * rhnErrataFile     
 * rhnErrataFileTmp      
 * rhnFile
 and may be more.

 * New rhnPackageChecksum table will need to be added as a lookup table for package checksums.
  
{{{

SQL> desc rhnChecksumType
 Name					   Null?    Type
 ----------------------------------------- -------- ----------------------------
 ID					   NOT NULL NUMBER
 LABEL					   NOT NULL VARCHAR2(32)
 DESCRIPTION				   NOT NULL VARCHAR2(64)
 CREATED				   NOT NULL DATE
 MODIFIED				   NOT NULL DATE
                                               

x
Sample Data:
1, md5, md5sum, 26-JUN-09, 28-JUN-09
2, sha256, sha256, 26-JUN-09, 28-JUN-09 1g367fcfe8fb56662d2831d5cce8a5157db75

SQL> desc rhnPackageChecksum
 Name                                                  Null?    Type
 ----------------------------------------------------- -------- ------------------------------------
 PACKAGE_ID                                            NOT NULL NUMBER
 CHECKSUM_TYPE_ID			               NOT NULL NUMBER
 CHECKSUM				               NOT NULL VARCHAR2(128)
x
Sample Data:
1001, 1, 1g367fcfe8fb56662d2831d5cce8a5157db75
1001, 2, 9a06da045a9d4468e5d678a0cebe7ada3ae0f4f01ec7da0e39cba3277974beea
1002, 1, 2f367fcfe8fb56662d2831d5cce8a5157db56
1002, 2, 1906da045a9d4468e5d678a0cebe7ada3ae0f4f01ec7da0e39cba3277974becw

* Drop md5sum from rhnPackage table

* remove index on orgid, md5sum


rhnPackageFile Table:

* Extend the md5sum column size to 128
* rename md5sum to checksum
* fix filelists page to reflect the rename

rhnPackageSource Table:

* Add sha256 column

}}}       

We compute both checksums while populating the package info to the above table and we cpould jus do a lookup and get whichever we want based on the type of client we're talking to.

=== Spacewalk Server (estimates: 60 hours) ===
 
 * Repo Generation:
  * server side repo generation should include shasum support for channels with newer rpm content and be backward compatible with older clients.
  * What if a custom channel has mixed content? yum doesn't care about whats in the channel, it only cares about the repo format. So as long as the repomd.xml is of compatible format it should work. 
  * So the problem would be for custom channels. Older yum clients will not be able to understand sha256 checksum. So we'll need to make a smarter decision as to which content it is and which checksum to use
  * So once approach is to get the checksum for the packages associated to the custom channel and generate the repomd as sha1 if its older content or sha256 if its newer. This is gona be the tricky part.

 * Importer/Exporter + ISS:
This should work as expected as all we're doing is extracting the content from the db and caching it into xml files. But we'll need to fix queries specifically dealing with above tables. For example when we export package metadata for a given channel, we'll need to fix the query to use p.checksum instead of p.md5sum etc. Mostly cosmetic changes.

 * App Handler:
  * compares md5sums to check if pkgs is already uploaded, move that to shasum instead
  * other getMd5Sum calls used on the server

 * xp Handler:
  * rhn-package-manager server side changes to support sha256

 * Other:
  * We have other places where we make assumptions about md5sum so migrate those to shasum.
  * make sure the /var/satellite paths are formed as expected with any checksum.

=== Proxy (Estimates: 40 hours) ===
Checksum is used only in proxy during kickstart. Proxy replace /ty/''sessionid'' with /ty/''packagechecksum'' so squid can cache it. Proxy do not care if that checksum is MD5 or SHA256 or whatever. Only requirement is that it should be unique for each package.
Only small problem can be if one package is sent with MD5 checksum (checksum is taken from HTTP header) for older client and then for newer client with SHA256 checksum. Proxy will then treat this two as different content. So it will store one package twice. We may change the logic to always require only specific checksum.

* package uploads through proxy should work as expected for newer rpms.

Packages uploaded through rhn_package_manager to local proxy channel should handle sha256 properly.

=== Web UI (Estimates: 20 hours) ===

* pages displaying checksum:
 * packageDetails
 * Errata
 * packageFilelists

* package details page will now show a new field called checksum type

We need to make sure the queries used by these pages reflect any new db changes that effect checksum display. We now assume md5sum by default.

=== API( Estimates:  20 hours) ===
 * need to fix the hibernate objects and some cosmetic stuff by renaming the instances
  * packageHandler.getDetails - include checksum type as one of the return value
  * packageHandler.listFiles
  * errataHandler.listPackages

=== Client( Estimates:  40 hours ) ===
 * yum + rhn-plugin:
  * yum repodata (repodata file checksums, rpm file checksums)
  * yum-rhn-plugin plays well with new yum and rpm
  * older yum clients dont understand sha256 so they will fail if the repo is not sha1.
  * so we'll need to test that the repo generated on the server is compatible with newer/older clients. 

 * Scheduled actions:
  * scheduled actions need to be tested and made sure work on f11
  * fix rpmUtils and supported calls to incorporate any rpm api changes
  * rpm verify action verifies newer rpms as expected
   * this deals with rhnServerActionVerifyResult

=== Tools ( Estimates: 20 hours x 2 = satellite(prad) + proxy(msuchy)) ===
 * satellite sync:
  * Need to make sure syncing content works as expected for sha256 supported content
  * Make sure satellite-sync runs without issues on f11
  * populate shasum into rhnPackage for newer packages and md5sum for older

 * rhnpush:
  * sha256 supported package can be uploaded  as expected
  * populate shasum into rhnPackage for newer packages and md5sum for older
  * might wanna change the package verify to shasum as well

 * rhn-package-manager(Proxy):
  * sha256 supported package can be uploaded as expected

 * rhn-ssl-tool:
  * rhn-ssl-tool deploys rpms. It currently calls gen-rpm call to generate the spec and create and deploy em
  * need to test and make sure this area is able to generate f11(with sha256) and older rpms (as usual)

=== Upgrades ( Estimates: 40 hours) ===
 * Any db changes should be upgradable from older satellites
 * Any existing content should be upgradable as well. 
 * I can't think of any existing content that would need to be migrated to sha256.(something to look for)