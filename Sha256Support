= SHA256 Support for Spacewalk =

== Goal ==
 * Fedora 11 Clients with sha256 supported content should be able to interact with spacewalk and proxy as expected
 * spacewalk server should be able to support newer rpm content in addition to old
 * proxy should be able to serve and accept newer rpm content.
 * webui should display the right checkSum based on the rpm
 * API calls should be be able to handle sha256 checksum both as input args and output results
 * Both proxy and spacewalk tools should handle shasum.
 * if possible move to shasum replacing md5 for other non-rpm verifications on spacewalk/proxy

== Tasks (in order) ==

|| Task || Estimated Hours || Assignee || Status || Notes ||
|| Database Changes  || 40 hours || mmraka/prad || || ||
|| spacewalk Server + Tools|| 60 hours || prad  || ||  ||
|| Proxy Server + Tools || 60 hours || msuchy  || || ||
|| Client tools  || 40 hours || jmatthews + prad || ||  ||
|| Web UI + API  || 40 hours || msuchy/jmatthews  ||  || ||
|| Upgrades || 30 hours ||mmraka/prad ||  || ||


The order here represents the dependency chain. Database changes would be the first to get done so we have those to develop and test the app code changes. spacewalk and proxy  development can go in parallel, but these should be done(at least partly) for client work to start so we have supporting server code for clients. Web UI and upgrades can go last I guess. As jmatthews and mmraka are not allocated full time on this feature, So msuchy and I will be primary developers on this feature with some assistance from jmatthews and mmraka.

== Specifications ==  

Following are the possible areas we'll need to make to support sha256 content across board. I'm sure we'll find more as we move along, but these are the major areas we need to make sure works as expected with new sha256 supported rpms on f11.

=== Database(estimates: 30 hrs) ===

Checksum usage in spacewalk (Some of these might be one or the other, depending on rpm version, yum version etc):
 * rhnPackageFile 
 * rhnPackage
 * rhnDownloadFile 
 * rhnKickstartFile 
 * rhnKSTreeFile    
 * rhnPackageSource  
 * rhnErrataFile     
 * rhnErrataFileTmp  
 * rhnPackageFile    
 * rhnFile
 and may be more.

 * New rhnPackageChecksum table will need to be added as a lookup table for package checksums.
  
{{{
New Table:

rhnPackageChecksum
--------------------
ID
PACKAGE_ID
MD5SUM
SHA256                                                

x
Sample Data:
1,100,fcfe8fb56662d2831d5cce8a5157db75, 1g367fcfe8fb56662d2831d5cce8a5157db75
2,101,fcfe8fb56662d2831d5cce8a5157db75, 1g367fcfe8fb56662d2831d5cce8a5157db75

SQL> desc rhnPackageChecksum
 Name                                                  Null?    Type
 ----------------------------------------------------- -------- ------------------------------------
 ID                                                    NOT NULL NUMBER
 PACKAGE_ID                                            NOT NULL NUMBER
 MD5SUM                                                NOT NULL VARCHAR2(64)
 SHA256                                                NOT NULL VARCHAR2(64)

SQL> 


}}}

 * A checksum_id columns will be added to rhnPackage table fk to rhnPackageChecksum

{{{

alter table rhnPackage
  add checksum_id number
constraint rhn_pkg_checksum_nn not null
constraint rhn_pkg_checksum_id_fk
    references rhnPackageChecksum(id);

show errors

}}}


TODO: Anything else you can think of in this area michael?        

These are some of the tables we read the rpm header or compute manually and populate the md5sum. We should make this more generic say "checkSum" column instead of md5sum. This way if we upload or sync newer rpm content such as f11 we can serve any checksum format. 

Another thought was to have some kind of a lookup table by checksum type. But I think its much better to make the checksum generic and not bother about what type it is from server perspective.

=== Spacewalk Server (estimates: 60 hours) ===
 
 * Repo Generation:
  * server side repo generation should include shasum support for channels with newer rpm content and be backward compatible with older clients.
  * What if a custom channel has mixed content? yum doesn't care about whats in the channel, it only cares about the repo format. So as long as the repomd.xml is of compatible format it should work. 
  * So the problem would be for custom channels. Older yum clients will not be able to understand sha256 checksum. So we'll need to make a smarter decision as to which content it is and which checksum to use
  * So once approach is to get the checksum for the packages associated to the custom channel and generate the repomd as sha1 if its older content or sha256 if its newer. This is gona be the tricky part.

 * Importer/Exporter + ISS:
This should work as expected as all we're doing is extracting the content from the db and caching it into xml files. But we'll need to fix queries specifically dealing with above tables. For example when we export package metadata for a given channel, we'll need to fix the query to use p.checksum instead of p.md5sum etc. Mostly cosmetic changes.

 * App Handler:
  * compares md5sums to check if pkgs is already uploaded, move that to shasum instead
  * other getMd5Sum calls used on the server

 * xp Handler:
  * rhn-package-manager server side changes to support sha256

 * Other:
  * We have other places where we make assumptions about md5sum so migrate those to shasum.
  * make sure the /var/satellite paths are formed as expected with any checksum.

=== Proxy (Estimates: 40 hours) ===
If I understand this part correctly, once client sends in a package request, apache on proxy generates a url with an md5sum hash to find the package from the squid cache and if missing goes to satellite to fetch that and serve it to the client. 
 * If the checksum here is from the rpm headers(I presume) then we'll need to make sure nothing breaks here wrt newer sha256 packages.
 * package uploads through proxy should work as expected for newer rpms.
 * make sure Provisioning of guests through proxy works as expected.

Packages uploaded through rhn_package_manager to local proxy channel should handle sha256 properly.

=== Web UI (Estimates: 20 hours) ===

* pages displaying checksum:
 * packageDetails
 * Errata
 * packageFilelists

* package details page will now show a new field called checksum type

We need to make sure the queries used by these pages reflect any new db changes that effect checksum display. We now assume md5sum by default.

=== API( Estimates:  20 hours) ===
 * need to fix the hibernate objects and some cosmetic stuff by renaming the instances
  * packageHandler.getDetails - include checksum type as one of the return value
  * packageHandler.listFiles
  * errataHandler.listPackages

=== Client( Estimates:  40 hours ) ===
 * yum + rhn-plugin:
  * yum repodata (repodata file checksums, rpm file checksums)
  * yum-rhn-plugin plays well with new yum and rpm
  * older yum clients dont understand sha256 so they will fail if the repo is not sha1.
  * so we'll need to test that the repo generated on the server is compatible with newer/older clients. 

 * Scheduled actions:
  * scheduled actions need to be tested and made sure work on f11
  * fix rpmUtils and supported calls to incorporate any rpm api changes
  * rpm verify action verifies newer rpms as expected
   * this deals with rhnServerActionVerifyResult

=== Tools ( Estimates: 20 hours x 2 = satellite(prad) + proxy(msuchy)) ===
 * satellite sync:
  * Need to make sure syncing content works as expected for sha256 supported content
  * Make sure satellite-sync runs without issues on f11
  * populate shasum into rhnPackage for newer packages and md5sum for older

 * rhnpush:
  * sha256 supported package can be uploaded  as expected
  * populate shasum into rhnPackage for newer packages and md5sum for older
  * might wanna change the package verify to shasum as well

 * rhn-package-manager(Proxy):
  * sha256 supported package can be uploaded as expected

 * rhn-ssl-tool:
  * rhn-ssl-tool deploys rpms. It currently calls gen-rpm call to generate the spec and create and deploy em
  * need to test and make sure this area is able to generate f11(with sha256) and older rpms (as usual)

=== Upgrades ( Estimates: 40 hours) ===
 * Any db changes should be upgradable from older satellites
 * Any existing content should be upgradable as well. 
 * I can't think of any existing content that would need to be migrated to sha256.(something to look for)